{
  "aws.cw.deleteAlarms": {
    "prefix": "aws.cw.deleteAlarms",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var cw = new AWS.CloudWatch({apiVersion: '2010-08-01'});",
      "var params = {",
      "  AlarmNames: ['Web_Server_CPU_Utilization']",
      "};",
      "cw.deleteAlarms(params, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } else {",
      "    console.log('Success', data);",
      "  }",
      "});"
    ],
    "description": "cloud watch delete Alarms"
  },
  "aws.cw.describeAlarms": {
    "prefix": "aws.cw.describeAlarms",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var cw = new AWS.CloudWatch({apiVersion: '2010-08-01'});",
      "cw.describeAlarms({StateValue: 'INSUFFICIENT_DATA'}, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } else {",
      "    // List the names of all current alarms in the console",
      "    data.MetricAlarms.forEach(function (item, index, array) {",
      "       console.log(item.AlarmName);",
      "    });",
      "  }",
      "});"
    ],
    "description": "cloud watch describe Alarms"
  },
  "aws.cw.disableAlarmActions": {
    "prefix": "aws.cw.disableAlarmActions",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var cw = new AWS.CloudWatch({apiVersion: '2010-08-01'});",
      "cw.disableAlarmActions({AlarmNames: ['Web_Server_CPU_Utilization']}, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } else {",
      "    console.log('Success', data);",
      "  }",
      "});"
    ],
    "description": "cloud watch disable Alarm Actions"
  },
  "aws.cw.putMetricAlarm": {
    "prefix": "aws.cw.putMetricAlarm",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var cw = new AWS.CloudWatch({apiVersion: '2010-08-01'});",
      "var params = {",
      "  AlarmName: 'Web_Server_CPU_Utilization',",
      "  ComparisonOperator: 'GreaterThanThreshold',",
      "  EvaluationPeriods: 1,",
      "  MetricName: 'CPUUtilization',",
      "  Namespace: 'AWS/EC2',",
      "  Period: 60,",
      "  Statistic: 'Average',",
      "  Threshold: 70.0,",
      "  ActionsEnabled: true,",
      "  AlarmActions: ['ACTION_ARN'],",
      "  AlarmDescription: 'Alarm when server CPU exceeds 70%',",
      "  Dimensions: [",
      "    {",
      "      Name: 'InstanceId',",
      "      Value: 'INSTANCE_ID'",
      "    },",
      "  ],",
      "  Unit: 'Seconds'",
      "};",
      "cw.putMetricAlarm(params, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } else {",
      "    console.log('Alarm action added', data);",
      "    var paramsEnableAlarmAction = {",
      "      AlarmNames: [paramsUpdateAlarm.AlarmName]",
      "    };",
      "    cw.enableAlarmActions(paramsEnableAlarmAction, function(err, data) {",
      "      if (err) {",
      "        console.log('Error', err);",
      "      } else {",
      "        console.log('Alarm action enabled', data);",
      "      }",
      "    });",
      "  }",
      "});"
    ],
    "description": "cloud watch put metric Alarm"
  },
  "aws.cw.listMetrics": {
    "prefix": "aws.cw.listMetrics",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var cw = new AWS.CloudWatch({apiVersion: '2010-08-01'});",
      "var params = {",
      "  Dimensions: [",
      "    {",
      "      Name: 'LogGroupName', /* required */",
      "    },",
      "  ],",
      "  MetricName: 'IncomingLogEvents',",
      "  Namespace: 'AWS/Logs'",
      "};",
      "cw.listMetrics(params, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } else {",
      "    console.log('Metrics', JSON.stringify(data.Metrics));",
      "  }",
      "});"
    ],
    "description": "cloud watch list Metrics"
  },
  "aws.cw.putMetricAlarm": {
    "prefix": "aws.cw.putMetricAlarm",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var cw = new AWS.CloudWatch({apiVersion: '2010-08-01'});",
      "var params = {",
      "  AlarmName: 'Web_Server_CPU_Utilization',",
      "  ComparisonOperator: 'GreaterThanThreshold',",
      "  EvaluationPeriods: 1,",
      "  MetricName: 'CPUUtilization',",
      "  Namespace: 'AWS/EC2',",
      "  Period: 60,",
      "  Statistic: 'Average',",
      "  Threshold: 70.0,",
      "  ActionsEnabled: false,",
      "  AlarmDescription: 'Alarm when server CPU exceeds 70%',",
      "  Dimensions: [",
      "    {",
      "      Name: 'InstanceId',",
      "      Value: 'INSTANCE_ID'",
      "    },",
      "  ],",
      "  Unit: 'Seconds'",
      "};",
      "cw.putMetricAlarm(params, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } else {",
      "    console.log('Success', data);",
      "  }",
      "});"
    ],
    "description": "cloud watch put Metric Alarm"
  },
  "aws.cw.putMetricData": {
    "prefix": "aws.cw.putMetricData",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var cw = new AWS.CloudWatch({apiVersion: '2010-08-01'});",
      "var params = {",
      "  MetricData: [",
      "    {",
      "      MetricName: 'PAGES_VISITED',",
      "      Dimensions: [",
      "        {",
      "          Name: 'UNIQUE_PAGES',",
      "          Value: 'URLS'",
      "        },",
      "      ],",
      "      Unit: 'None',",
      "      Value: 1.0",
      "    },",
      "  ],",
      "  Namespace: 'SITE/TRAFFIC'",
      "};",
      "cw.putMetricData(params, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } else {",
      "    console.log('Success', JSON.stringify(data));",
      "  }",
      "});"
    ],
    "description": "cloud watch put Metric Data"
  },
  "aws.cw.putEvents": {
    "prefix": "aws.cw.putEvents",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var cwevents = new AWS.CloudWatchEvents({apiVersion: '2015-10-07'});",
      "var params = {",
      "  Entries: [",
      "    {",
      "      Detail: { 'key1': 'value1', 'key2': 'value2' },",
      "      DetailType: 'Demo',",
      "      Resources: [",
      "        'LAMBDA_FUNCTION_ARN',",
      "      ],",
      "      Source: 'com.company.app'",
      "    }",
      "  ]",
      "};",
      "cwevents.putEvents(params, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } else {",
      "    console.log('Success', data.Entries);",
      "  }",
      "});"
    ],
    "description": "cloud watch put Events"
  },
  "aws.cw.putRule": {
    "prefix": "aws.cw.putRule",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var cwevents = new AWS.CloudWatchEvents({apiVersion: '2015-10-07'});",
      "var params = {",
      "  Name: 'DEMO_EVENT',",
      "  RoleArn: 'IAM_ROLE_ARN',",
      "  ScheduleExpression: 'rate(5 minutes)', ",
      "  State: 'ENABLED'",
      "};",
      "cwevents.putRule(params, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } else {",
      "    console.log('Success', data.RuleArn);",
      "  }",
      "});"
    ],
    "description": "cloud watch put Rule"
  },
  "aws.cw.putTargets": {
    "prefix": "aws.cw.putTargets",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var cwevents = new AWS.CloudWatchEvents({apiVersion: '2015-10-07'});",
      "var params = {",
      "  Rule: 'DEMO_EVENT',",
      "  Targets: [",
      "    {",
      "      Arn: 'LAMBDA_FUNCTION_ARN',",
      "      Id: 'myCloudWatchEventsTarget',",
      "    }",
      "  ]",
      "};",
      "cwevents.putTargets(params, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } else {",
      "    console.log('Success', data);",
      "  }",
      "});"
    ],
    "description": "cloud watch put Targets"
  },
  "aws.cw.deleteSubscriptionFilter": {
    "prefix": "aws.cw.deleteSubscriptionFilter",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var cwl = new AWS.CloudWatchLogs({apiVersion: '2014-03-28'});",
      "var params = {",
      "  filterName: 'FILTER',",
      "  logGroupName: 'LOG_GROUP'",
      "};",
      "cwl.deleteSubscriptionFilter(params, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } else {",
      "    console.log('Success', data);",
      "  }",
      "});"
    ],
    "description": "cloud watch delete Subscription Filter"
  },
  "aws.cw.describeSubscriptionFilters": {
    "prefix": "aws.cw.describeSubscriptionFilters",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var cwl = new AWS.CloudWatchLogs({apiVersion: '2014-03-28'});",
      "var params = {",
      "  logGroupName: 'GROUP_NAME',",
      "  limit: 5",
      "};",
      "cwl.describeSubscriptionFilters(params, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } else {",
      "    console.log('Success', data.subscriptionFilters);",
      "  }",
      "});"
    ],
    "description": "cloud watch describe Subscription Filters"
  },
  "aws.cw.putSubscriptionFilter": {
    "prefix": "aws.cw.putSubscriptionFilter",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var cwl = new AWS.CloudWatchLogs({apiVersion: '2014-03-28'});",
      "var params = {",
      "  destinationArn: 'LAMBDA_FUNCTION_ARN',",
      "  filterName: 'FILTER_NAME',",
      "  filterPattern: 'ERROR',",
      "  logGroupName: 'LOG_GROUP',",
      "};",
      "cwl.putSubscriptionFilter(params, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } else {",
      "    console.log('Success', data);",
      "  }",
      "});"
    ],
    "description": "cloud watch put Subscription Filter"
  },
  "aws.ddb.batchGetItem": {
    "prefix": "aws.ddb.batchGetItem",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var ddb = new AWS.DynamoDB({apiVersion: '2012-08-10'});",
      "var params = {",
      "  RequestItems: {",
      "    'TABLE_NAME': {",
      "      Keys: [",
      "        {'CardID': {N: '1'}},",
      "        {'CardID': {N: '3'}},",
      "        {'CardID': {N: '5'}}",
      "      ],",
      "      ProjectionExpression: 'CardID, CardName'",
      "    }",
      "  }",
      "};",
      "ddb.batchGetItem(params, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } else {",
      "    data.Responses.TABLE_NAME.forEach(function(element, index, array) {",
      "      console.log(element);",
      "    });",
      "  }",
      "});"
    ],
    "description": "dynamoDB batch Get Item"
  },
  "aws.ddb.batchWriteItem": {
    "prefix": "aws.ddb.batchWriteItem",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var ddb = new AWS.DynamoDB({apiVersion: '2012-08-10'});",
      "var params = {",
      "  RequestItems: {",
      "    'TABLE_NAME': [",
      "       {",
      "         PutRequest: {",
      "           Item: {",
      "             'KEY': { 'N': 'KEY_VALUE' },",
      "               'ATTRIBUTE_1': { 'S': 'ATTRIBUTE_1_VALUE' },",
      "               'ATTRIBUTE_2': { 'N': 'ATTRIBUTE_2_VALUE' }",
      "           }",
      "         }",
      "       },",
      "       {",
      "         PutRequest: {",
      "           Item: {",
      "             'KEY': { 'N': 'KEY_VALUE' },",
      "               'ATTRIBUTE_1': { 'S': 'ATTRIBUTE_1_VALUE' },",
      "               'ATTRIBUTE_2': { 'N': 'ATTRIBUTE_2_VALUE' }",
      "           }",
      "         }",
      "       }",
      "    ]",
      "  }",
      "};",
      "ddb.batchWriteItem(params, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } else {",
      "    console.log('Success', data);",
      "  }",
      "});"
    ],
    "description": "dynamoDB batch Write Item"
  },
  "aws.ddb.createTable": {
    "prefix": "aws.ddb.createTable",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var ddb = new AWS.DynamoDB({apiVersion: '2012-08-10'});",
      "var params = {",
      "  AttributeDefinitions: [",
      "    {",
      "      AttributeName: 'CUSTOMER_ID',",
      "      AttributeType: 'N'",
      "    },",
      "    {",
      "      AttributeName: 'CUSTOMER_NAME',",
      "      AttributeType: 'S'",
      "    }",
      "  ],",
      "  KeySchema: [",
      "    {",
      "      AttributeName: 'CUSTOMER_ID',",
      "      KeyType: 'HASH'",
      "    },",
      "    {",
      "      AttributeName: 'CUSTOMER_NAME',",
      "      KeyType: 'RANGE'",
      "    }",
      "  ],",
      "  ProvisionedThroughput: {",
      "    ReadCapacityUnits: 1,",
      "    WriteCapacityUnits: 1",
      "  },",
      "  TableName: 'CUSTOMER_LIST',",
      "  StreamSpecification: {",
      "    StreamEnabled: false",
      "  }",
      "};",
      "ddb.createTable(params, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } else {",
      "    console.log('Table Created', data);",
      "  }",
      "});"
    ],
    "description": "dynamoDB create Table"
  },
  "aws.ddb.deleteItem": {
    "prefix": "aws.ddb.deleteItem",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var ddb = new AWS.DynamoDB({apiVersion: '2012-08-10'});",
      "var params = {",
      "  TableName: 'TABLE',",
      "  Key: {",
      "    'KEY_NAME': {N: 'VALUE'}",
      "  }};",
      "ddb.deleteItem(params, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } else {",
      "    console.log('Success', data);",
      "  }",
      "});"
    ],
    "description": "dynamoDB delete Item"
  },
  "aws.ddb.deleteTable": {
    "prefix": "aws.ddb.deleteTable",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var ddb = new AWS.DynamoDB({apiVersion: '2012-08-10'});",
      "var params = {",
      "  TableName: process.argv[2]",
      "};",
      "ddb.deleteTable(params, function(err, data) {",
      "  if (err && err.code === 'ResourceNotFoundException') {",
      "    console.log('Error: Table not found');",
      "  } else if (err && err.code === 'ResourceInUseException') {",
      "    console.log('Error: Table in use');",
      "  } else {",
      "    console.log('Success', data);",
      "  }",
      "});"
    ],
    "description": "dynamoDB delete Table"
  },
  "aws.ddb.describeTable": {
    "prefix": "aws.ddb.describeTable",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var ddb = new AWS.DynamoDB({apiVersion: '2012-08-10'});",
      "var params = {",
      "  TableName: process.argv[2]",
      "};",
      "ddb.describeTable(params, function(err, data) {",
      "  if (err) {",
      "    throw err;",
      "  } else {",
      "    console.log('Success', data.Table.KeySchema);",
      "  }",
      "});"
    ],
    "description": "dynamoDB describe Table"
  },
  "aws.ddb.getItem": {
    "prefix": "aws.ddb.getItem",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var ddb = new AWS.DynamoDB({apiVersion: '2012-08-10'});",
      "var params = {",
      "  TableName: 'TABLE',",
      "  Key: {",
      "    'KEY_NAME': {N: '1'}",
      "  },",
      "  ProjectionExpression: 'ATTRIBUTE_NAME'",
      "};",
      "ddb.getItem(params, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } else {",
      "    console.log('Success', data.Item);",
      "  }",
      "});"
    ],
    "description": "dynamoDB get Item"
  },
  "aws.ddb.listTables": {
    "prefix": "aws.ddb.listTables",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var ddb = new AWS.DynamoDB({apiVersion: '2012-08-10'});",
      "ddb.listTables({Limit: 10}, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err.code);",
      "  } else {",
      "    console.log('Table names are ', data.TableNames);",
      "  }",
      "});"
    ],
    "description": "dynamoDB list Tables"
  },
  "aws.ddb.putItem": {
    "prefix": "aws.ddb.putItem",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var ddb = new AWS.DynamoDB({apiVersion: '2012-08-10'});",
      "var params = {",
      "  TableName: 'CUSTOMER_LIST',",
      "  Item: {",
      "    'CUSTOMER_ID' : {N: '001'},",
      "    'CUSTOMER_NAME' : {S: 'Richard Roe'}",
      "  }",
      "};",
      "ddb.putItem(params, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } else {",
      "    console.log('Success', data);",
      "  }",
      "});"
    ],
    "description": "dynamoDB put Item"
  },
  "aws.ddb.query": {
    "prefix": "aws.ddb.query",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var ddb = new AWS.DynamoDB({apiVersion: '2012-08-10'});",
      "var params = {",
      "  ExpressionAttributeValues: {",
      "    ':s': {N: '2'},",
      "    ':e' : {N: '09'},",
      "    ':topic' : {S: 'PHRASE'}",
      "   },",
      " KeyConditionExpression: 'Season = :s and Episode > :e',",
      " ProjectionExpression: 'Episode, Title, Subtitle',",
      " FilterExpression: 'contains (Subtitle, :topic)',",
      " TableName: 'EPISODES_TABLE'",
      "};",
      "ddb.query(params, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } else {",
      "    //console.log('Success', data.Items);",
      "    data.Items.forEach(function(element, index, array) {",
      "      console.log(element.Title.S + ' (' + element.Subtitle.S + ')');",
      "    });",
      "  }",
      "});"
    ],
    "description": "dynamoDB query"
  },
  "aws.ddb.scan": {
    "prefix": "aws.ddb.scan",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var ddb = new AWS.DynamoDB({apiVersion: '2012-08-10'});",
      "var params = {",
      "  ExpressionAttributeValues: {",
      "    ':s': {N: '2'},",
      "    ':e' : {N: '09'},",
      "    ':topic' : {S: 'PHRASE'}",
      "   },",
      " ProjectionExpression: 'Episode, Title, Subtitle',",
      " FilterExpression: 'contains (Subtitle, :topic)',",
      " TableName: 'EPISODES_TABLE'",
      "};",
      "ddb.scan(params, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } else {",
      "    //console.log('Success', data.Items);",
      "    data.Items.forEach(function(element, index, array) {",
      "      console.log(element.Title.S + ' (' + element.Subtitle.S + ')');",
      "    });",
      "  }",
      "});"
    ],
    "description": "dynamoDB scan"
  },
  "aws.ddbdoc.delete": {
    "prefix": "aws.ddbdoc.delete",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var docClient = new AWS.DynamoDB.DocumentClient({apiVersion: '2012-08-10'});",
      "var params = {",
      "  Key: {",
      "    'HASH_KEY': VALUE",
      "  },",
      "  TableName: 'TABLE'",
      "};",
      "docClient.delete(params, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } else {",
      "    console.log('Success', data);",
      "  }",
      "});"
    ],
    "description": "dynamoDB delete"
  },
  "aws.ddbdoc.get": {
    "prefix": "aws.ddbdoc.get",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var docClient = new AWS.DynamoDB.DocumentClient({apiVersion: '2012-08-10'});",
      "var params = {",
      " TableName: 'EPISODES_TABLE',",
      " Key: {'KEY_NAME': VALUE}",
      "};",
      "docClient.get(params, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } else {",
      "    console.log('Success', data.Item);",
      "  }",
      "});"
    ],
    "description": "dynamoDB doc get"
  },
  "aws.ddbdoc.put": {
    "prefix": "aws.ddbdoc.put",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var docClient = new AWS.DynamoDB.DocumentClient({apiVersion: '2012-08-10'});",
      "var params = {",
      "  TableName: 'TABLE',",
      "  Item: {",
      "    'HASHKEY': VALUE,",
      "    'ATTRIBUTE_1': 'STRING_VALUE',",
      "    'ATTRIBUTE_2': VALUE_2",
      "  }",
      "};",
      "docClient.put(params, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } else {",
      "    console.log('Success', data);",
      "  }",
      "});"
    ],
    "description": "dynamoDB doc put"
  },
  "aws.ddbdoc.query": {
    "prefix": "aws.ddbdoc.query",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var docClient = new AWS.DynamoDB.DocumentClient({apiVersion: '2012-08-10'});",
      "var params = {",
      "  ExpressionAttributeValues: {",
      "    ':s': 2,",
      "    ':e': 9,",
      "    ':topic': 'PHRASE'",
      "   },",
      " KeyConditionExpression: 'Season = :s and Episode > :e',",
      " FilterExpression: 'contains (Subtitle, :topic)',",
      " TableName: 'EPISODES_TABLE'",
      "};",
      "docClient.query(params, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } else {",
      "    console.log('Success', data.Items);",
      "  }",
      "});"
    ],
    "description": "dynamoDB doc query"
  },
  "aws.ddbdoc.update": {
    "prefix": "aws.ddbdoc.update",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var docClient = new AWS.DynamoDB.DocumentClient({apiVersion: '2012-08-10'});",
      "var season = SEASON_NUMBER;",
      "var episode = EPISODES_NUMBER;",
      "var params = {",
      "  TableName: 'EPISODES_TABLE',",
      "  Key: {",
      "    'Season' : season,",
      "    'Episode' : episode",
      "  },",
      "  UpdateExpression: 'set Title = :t, Subtitle = :s',",
      "  ExpressionAttributeValues: {",
      "    ':t' : 'NEW_TITLE',",
      "    ':s' : 'NEW_SUBTITLE'",
      "  }",
      "};",
      "docClient.update(params, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } else {",
      "    console.log('Success', data);",
      "  }",
      "});"
    ],
    "description": "dynamoDB doc update"
  },
  "aws.ec2.allocateAddress": {
    "prefix": "aws.ec2.allocateAddress",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var ec2 = new AWS.EC2({apiVersion: '2016-11-15'});",
      "var paramsAllocateAddress = {",
      "   Domain: 'vpc'",
      "};",
      "ec2.allocateAddress(paramsAllocateAddress, function(err, data) {",
      "   if (err) {",
      "      console.log('Address Not Allocated', err);",
      "   } else {",
      "      console.log('Address allocated:', data.AllocationId);",
      "      var paramsAssociateAddress = {",
      "        AllocationId: data.AllocationId,",
      "        InstanceId: 'INSTANCE_ID'",
      "      };",
      "      // Associate the new Elastic IP address with an EC2 instance",
      "      ec2.associateAddress(paramsAssociateAddress, function(err, data) {",
      "        if (err) {",
      "          console.log('Address Not Associated', err);",
      "        } else {",
      "          console.log('Address associated:', data.AssociationId);",
      "        }",
      "      });",
      "   }",
      "});"
    ],
    "description": "ec2 allocate Address"
  },
  "aws.ec2.createinstances": {
    "prefix": "aws.ec2.createinstances",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.loadFromPath('./config.json');",
      "var ec2 = new AWS.EC2({apiVersion: '2016-11-15'});",
      "var instanceParams = {",
      "   ImageId: 'AMI_ID', ",
      "   InstanceType: 't1.micro',",
      "   KeyName: 'KEY_PAIR_NAME',",
      "   MinCount: 1,",
      "   MaxCount: 1",
      "};",
      "var instancePromise = new AWS.EC2({apiVersion: '2016-11-15'}).runInstances(instanceParams).promise();",
      "instancePromise.then(",
      "  function(data) {",
      "    console.log(data);",
      "    var instanceId = data.Instances[0].InstanceId;",
      "    console.log('Created instance', instanceId);",
      "    // Add tags to the instance",
      "    tagParams = {Resources: [instanceId], Tags: [",
      "       {",
      "          Key: 'Name',",
      "          Value: 'SDK Sample'",
      "       }",
      "    ]};",
      "    // Create a promise on an EC2 service object",
      "    var tagPromise = new AWS.EC2({apiVersion: '2016-11-15'}).createTags(tagParams).promise();",
      "    // Handle promise's fulfilled/rejected states",
      "    tagPromise.then(",
      "      function(data) {",
      "        console.log('Instance tagged');",
      "      }).catch(",
      "        function(err) {",
      "        console.error(err, err.stack);",
      "      });",
      "  }).catch(",
      "    function(err) {",
      "    console.error(err, err.stack);",
      "  });"
    ],
    "description": "ec2 create instances"
  },
  "aws.ec2.terminateInstances": {
    "prefix": "aws.ec2.terminateInstances",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.loadFromPath('./config.json');",
      "var ec2 = new AWS.EC2({",
      "  apiVersion: '2016-11-15'",
      "});",
      "var params = {",
      "  InstanceIds: [",
      "    'i-0b1a0e90293b15d5f'",
      "  ]",
      "};",
      "ec2.terminateInstances(params, function (err, data) {",
      "  if (err) console.log(err, err.stack); // an error occurred",
      "  else console.log(data); // successful response",
      "});"
    ],
    "description": "ec2 terminate Instances"
  },
  "aws.ec2.createKeyPair": {
    "prefix": "aws.ec2.createKeyPair",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var ec2 = new AWS.EC2({apiVersion: '2016-11-15'});",
      "var params = {",
      "   KeyName: 'primary-key-pair'",
      "};",
      "ec2.createKeyPair(params, function(err, data) {",
      "   if (err) {",
      "      console.log('Error', err);",
      "   } else {",
      "      console.log(JSON.stringify(data));",
      "   }",
      "});"
    ],
    "description": "ec2 create Key Pair"
  },
  "aws.ec2.createSecurityGroup": {
    "prefix": "aws.ec2.createSecurityGroup",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.loadFromPath('./config.json');",
      "var ec2 = new AWS.EC2({apiVersion: '2016-11-15'});",
      "var vpc = null;",
      "ec2.describeVpcs(function(err, data) {",
      "   if (err) {",
      "     console.log('Cannot retrieve a VPC', err);",
      "   } else {",
      "     vpc = data.Vpcs[0].VpcId;",
      "     var paramsSecurityGroup = {",
      "        Description: 'Node.js SDK Example',",
      "        GroupName: 'sdk-example',",
      "        VpcId: vpc",
      "     };",
      "     // Create the instance",
      "     ec2.createSecurityGroup(paramsSecurityGroup, function(err, data) {",
      "        if (err) {",
      "           console.log('Error', err);",
      "        } else {",
      "           var SecurityGroupId = data.GroupId;",
      "           console.log('Success', SecurityGroupId);",
      "           var paramsIngress = {",
      "             GroupName: 'sdk-example',",
      "             IpPermissions:[",
      "                {",
      "                   IpProtocol: 'tcp',",
      "                   FromPort: 80,",
      "                   ToPort: 80,",
      "                   IpRanges: [{'CidrIp':'0.0.0.0/0'}]",
      "               },",
      "               {",
      "                   IpProtocol: 'tcp',",
      "                   FromPort: 22,",
      "                   ToPort: 22,",
      "                   IpRanges: [{'CidrIp':'0.0.0.0/0'}]",
      "               }",
      "             ]",
      "           };",
      "           ec2.authorizeSecurityGroupIngress(paramsIngress, function(err, data) {",
      "             if (err) {",
      "               console.log('Error', err);",
      "             } else {",
      "               console.log('Ingress Successfully Set', data);",
      "             }",
      "          });",
      "        }",
      "     });",
      "   }",
      "});"
    ],
    "description": "ec2 create Security Group"
  },
  "aws.ec2.deleteKeyPair": {
    "prefix": "aws.ec2.deleteKeyPair",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var ec2 = new AWS.EC2({apiVersion: '2016-11-15'});",
      "var params = {",
      "   KeyName: 'KEY_PAIR_NAME'",
      "};",
      "ec2.deleteKeyPair(params, function(err, data) {",
      "   if (err) {",
      "      console.log('Error', err);",
      "   } else {",
      "      console.log('Key Pair Deleted');",
      "   }",
      "});"
    ],
    "description": "ec2 delete Key Pair"
  },
  "aws.ec2.deleteSecurityGroup": {
    "prefix": "aws.ec2.deleteSecurityGroup",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var ec2 = new AWS.EC2({apiVersion: '2016-11-15'});",
      "var params = {",
      "   GroupId: 'GROUP_ID'",
      "};",
      "ec2.deleteSecurityGroup(params, function(err, data) {",
      "   if (err) {",
      "      console.log('Error', err);",
      "   } else {",
      "      console.log('Security Group Deleted');",
      "   }",
      "});"
    ],
    "description": "ec2 delete Security Group"
  },
  "aws.ec2.describeAddresses": {
    "prefix": "aws.ec2.describeAddresses",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var ec2 = new AWS.EC2({apiVersion: '2016-11-15'});",
      "var params = {",
      " Filters: [",
      "    {Name: 'domain', Values: ['vpc']}",
      " ]",
      "};",
      "ec2.describeAddresses(params, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } else {",
      "    console.log('Success', data.Addresses);",
      "  }",
      "});"
    ],
    "description": "ec2 describe Addresses"
  },
  "aws.ec2.describeInstances": {
    "prefix": "aws.ec2.describeInstances",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var ec2 = new AWS.EC2({apiVersion: '2016-11-15'});",
      "var params = {",
      "  DryRun: false",
      "};",
      "ec2.describeInstances(params, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err.stack);",
      "  } else {",
      "    console.log('Success', JSON.stringify(data));",
      "  }",
      "});"
    ],
    "description": "ec2 describe Instances"
  },
  "aws.ec2.describeKeyPairs": {
    "prefix": "aws.ec2.describeKeyPairs",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var ec2 = new AWS.EC2({apiVersion: '2016-11-15'});",
      "//var params = {};",
      "ec2.describeKeyPairs(function(err, data) {",
      "   if (err) {",
      "      console.log('Error', err);",
      "   } else {",
      "      console.log('Success', JSON.stringify(data.KeyPairs));",
      "   }",
      "});"
    ],
    "description": "ec2 describe Key Pairs"
  },
  "aws.ec2.describeregionsandzones": {
    "prefix": "aws.ec2.describeregionsandzones",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var ec2 = new AWS.EC2({apiVersion: '2016-11-15'});",
      "var params = {};",
      "ec2.describeRegions(params, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } else {",
      "    console.log('Regions: ', data.Regions);",
      "  }",
      "});",
      "ec2.describeAvailabilityZones(params, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } else {",
      "    console.log('Availability Zones: ', data.AvailabilityZones);",
      "  }",
      "});"
    ],
    "description": "ec2 describe regions and zones"
  },
  "aws.ec2.describeSecurityGroups": {
    "prefix": "aws.ec2.describeSecurityGroups",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var ec2 = new AWS.EC2({apiVersion: '2016-11-15'});",
      "var params = {",
      "  GroupIds: [",
      "    'SECURITY_GROUP_ID'",
      "  ]",
      "};",
      "ec2.describeSecurityGroups(params, function(err, data) {",
      "   if (err) {",
      "      console.log('Error', err);",
      "   } else {",
      "      console.log('Success', JSON.stringify(data.SecurityGroups));",
      "   }",
      "});"
    ],
    "description": "ec2 describe Security Groups"
  },
  "aws.ec2.monitorInstances": {
    "prefix": "aws.ec2.monitorInstances",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var ec2 = new AWS.EC2({apiVersion: '2016-11-15'});",
      "var params = {",
      "  InstanceIds: ['INSTANCE_ID'],",
      "  DryRun: true",
      "};",
      "if (process.argv[2].toUpperCase() === 'ON') {",
      "  // call EC2 to activate monitoring for selected instance",
      "  ec2.monitorInstances(params, function(err, data) {",
      "    if (err && err.code === 'DryRunOperation') {",
      "      params.DryRun = false;",
      "      ec2.monitorInstances(params, function(err, data) {",
      "          if (err) {",
      "            console.log('Error', err);",
      "          } else if (data) {",
      "            console.log('Success', data.InstanceMonitorings);",
      "          }",
      "      });",
      "    } else {",
      "      console.log('You do not have permission to change instance monitoring.');",
      "    }",
      "  });",
      "} else if (process.argv[2].toUpperCase() === 'OFF') {",
      "  // call EC2 to activate monitoring for selected instance",
      "  ec2.monitorInstances(params, function(err, data) {",
      "    if (err && err.code === 'DryRunOperation') {",
      "      params.DryRun = false;",
      "      ec2.unmonitorInstances(params, function(err, data) {",
      "          if (err) {",
      "            console.log('Error', err);",
      "          } else if (data) {",
      "            console.log('Success', data.InstanceMonitorings);",
      "          }",
      "      });",
      "    } else {",
      "      console.log('You do not have permission to change instance monitoring.');",
      "    }",
      "  });",
      "}"
    ],
    "description": "ec2 monitor Instances"
  },
  "aws.ec2.rebootInstances": {
    "prefix": "aws.ec2.rebootInstances",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var ec2 = new AWS.EC2({apiVersion: '2016-11-15'});",
      "var params = {",
      "  InstanceIds: ['INSTANCE_ID'],",
      "  DryRun: true",
      "};",
      "ec2.rebootInstances(params, function(err, data) {",
      "  if (err && err.code === 'DryRunOperation') {",
      "    params.DryRun = false;",
      "    ec2.rebootInstances(params, function(err, data) {",
      "        if (err) {",
      "          console.log('Error', err);",
      "        } else if (data) {",
      "          console.log('Success', data);",
      "        }",
      "    });",
      "  } else {",
      "    console.log('You do not have permission to change instance monitoring.');",
      "  }",
      "});"
    ],
    "description": "ec2 reboot Instances"
  },
  "aws.ec2.releaseAddress": {
    "prefix": "aws.ec2.releaseAddress",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var ec2 = new AWS.EC2({apiVersion: '2016-11-15'});",
      "var paramsReleaseAddress = {",
      "   AllocationId: 'ALLOCATION_ID'",
      "};",
      "ec2.releaseAddress(paramsReleaseAddress, function(err, data) {",
      "   if (err) {",
      "      console.log('Error', err);",
      "   } else {",
      "      console.log('Address released');",
      "   }",
      "});"
    ],
    "description": "ec2 release Address"
  },
  "aws.ec2.startstopinstances": {
    "prefix": "aws.ec2.startstopinstances",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var ec2 = new AWS.EC2({apiVersion: '2016-11-15'});",
      "var params = {",
      "  InstanceIds: [process.argv[3]],",
      "  DryRun: true",
      "};",
      "if (process.argv[2].toUpperCase() === 'START') {",
      "  // call EC2 to start the selected instances",
      "  ec2.startInstances(params, function(err, data) {",
      "    if (err && err.code === 'DryRunOperation') {",
      "      params.DryRun = false;",
      "      ec2.startInstances(params, function(err, data) {",
      "          if (err) {",
      "            console.log('Error', err);",
      "          } else if (data) {",
      "            console.log('Success', data.StartingInstances);",
      "          }",
      "      });",
      "    } else {",
      "      console.log('You do not have permission to start instances.');",
      "    }",
      "  });",
      "} else if (process.argv[2].toUpperCase() === 'STOP') {",
      "  // call EC2 to activate monitoring for selected instance",
      "  ec2.stopInstances(params, function(err, data) {",
      "    if (err && err.code === 'DryRunOperation') {",
      "      params.DryRun = false;",
      "      ec2.stopInstances(params, function(err, data) {",
      "          if (err) {",
      "            console.log('Error', err);",
      "          } else if (data) {",
      "            console.log('Success', data.StoppingInstances);",
      "          }",
      "      });",
      "    } else {",
      "      console.log('You do not have permission to stop instances');",
      "    }",
      "  });",
      "}"
    ],
    "description": "ec2 start stop instances"
  },
  "aws.iam.getAccessKeyLastUsed": {
    "prefix": "aws.iam.getAccessKeyLastUsed",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var iam = new AWS.IAM({apiVersion: '2010-05-08'});",
      "iam.getAccessKeyLastUsed({AccessKeyId: 'ACCESS_KEY_ID'}, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } else {",
      "    console.log('Success', data.AccessKeyLastUsed);",
      "  }",
      "});"
    ],
    "description": "ec2 get Access Key Last Used"
  },
  "aws.iam.attachRolePolicy": {
    "prefix": "aws.iam.attachRolePolicy",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var iam = new AWS.IAM({apiVersion: '2010-05-08'});",
      "var paramsRoleList = {",
      "  RoleName: process.argv[2]",
      "};",
      "iam.listAttachedRolePolicies(paramsRoleList, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } else {",
      "    var myRolePolicies = data.AttachedPolicies;",
      "    myRolePolicies.forEach(function (val, index, array) {",
      "      if (myRolePolicies[index].PolicyName === 'AmazonDynamoDBFullAccess') {",
      "        console.log('AmazonDynamoDBFullAccess is already attached to this role.')",
      "        process.exit();",
      "      }",
      "    });",
      "    var params = {",
      "      PolicyArn: 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess',",
      "      RoleName: process.argv[2]",
      "    };",
      "    iam.attachRolePolicy(params, function(err, data) {",
      "      if (err) {",
      "        console.log('Unable to attach policy to role', err);",
      "      } else {",
      "        console.log('Role attached successfully');",
      "      }",
      "    });",
      "  }",
      "});"
    ],
    "description": "iam attach Role Policy"
  },
  "aws.iam.createAccessKey": {
    "prefix": "aws.iam.createAccessKey",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var iam = new AWS.IAM({apiVersion: '2010-05-08'});",
      "iam.createAccessKey({UserName: 'IAM_USER_NAME'}, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } else {",
      "    console.log('Success', data.AccessKey);",
      "  }",
      "});"
    ],
    "description": "iam create Access Key"
  },
  "aws.iam.createAccountAlias": {
    "prefix": "aws.iam.createAccountAlias",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var iam = new AWS.IAM({apiVersion: '2010-05-08'});",
      "iam.createAccountAlias({AccountAlias: process.argv[2]}, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } else {",
      "    console.log('Success', data);",
      "  }",
      "});"
    ],
    "description": "iam create Account Alias"
  },
  "aws.iam.createPolicy": {
    "prefix": "aws.iam.createPolicy",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var iam = new AWS.IAM({apiVersion: '2010-05-08'});",
      "var myManagedPolicy = {",
      "    'Version': '2012-10-17',",
      "    'Statement': [",
      "        {",
      "            'Effect': 'Allow',",
      "            'Action': 'logs:CreateLogGroup',",
      "            'Resource': 'ARN'",
      "        },",
      "        {",
      "            'Effect': 'Allow',",
      "            'Action': [",
      "                'dynamodb:DeleteItem',",
      "                'dynamodb:GetItem',",
      "                'dynamodb:PutItem',",
      "                'dynamodb:Scan',",
      "                'dynamodb:UpdateItem'",
      "            ],",
      "            'Resource': 'ARN'",
      "        }",
      "    ]",
      "};",
      "var params = {",
      "  PolicyDocument: JSON.stringify(myManagedPolicy),",
      "  PolicyName: 'myDynamoDBPolicy', ",
      "};",
      "iam.createPolicy(params, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } else {",
      "    console.log('Success', data);",
      "  }",
      "});"
    ],
    "description": "iam create Policy"
  },
  "aws.iam.createUser": {
    "prefix": "aws.iam.createUser",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var iam = new AWS.IAM({apiVersion: '2010-05-08'});",
      "var params = {",
      "  UserName: process.argv[2]",
      "};",
      "iam.getUser(params, function(err, data) {",
      "  if (err && err.code === 'NoSuchEntity') {",
      "    iam.createUser(params, function(err, data) {",
      "      if (err) {",
      "        console.log('Error', err);",
      "      } else {",
      "        console.log('Success', data);",
      "      }",
      "    });",
      "  } else {",
      "    console.log('User ' + process.argv[2] + ' already exists', data.User.UserId);",
      "  }",
      "});"
    ],
    "description": "iam create User"
  },
  "aws.iam.deleteAccessKey": {
    "prefix": "aws.iam.deleteAccessKey",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var iam = new AWS.IAM({apiVersion: '2010-05-08'});",
      "var params = {",
      "  AccessKeyId: 'ACCESS_KEY_ID',",
      "  UserName: 'USER_NAME'",
      "};",
      "iam.deleteAccessKey(params, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } else {",
      "    console.log('Success', data);",
      "  }",
      "});"
    ],
    "description": "iam delete Access Key"
  },
  "aws.iam.deleteAccountAlias": {
    "prefix": "aws.iam.deleteAccountAlias",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var iam = new AWS.IAM({apiVersion: '2010-05-08'});",
      "iam.deleteAccountAlias({AccountAlias: process.argv[2]}, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } else {",
      "    console.log('Success', data);",
      "  }",
      "});"
    ],
    "description": "iam delete Account Alias"
  },
  "aws.iam.deleteServerCertificate": {
    "prefix": "aws.iam.deleteServerCertificate",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var iam = new AWS.IAM({apiVersion: '2010-05-08'});",
      "iam.deleteServerCertificate({ServerCertificateName: 'CERTIFICATE_NAME'}, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } else {",
      "    console.log('Success', data);",
      "  }",
      "});"
    ],
    "description": "iam delete Server Certificate"
  },
  "aws.iam.deleteUser": {
    "prefix": "aws.iam.deleteUser",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var iam = new AWS.IAM({apiVersion: '2010-05-08'});",
      "var params = {",
      "  UserName: process.argv[2]",
      "};",
      "iam.getUser(params, function(err, data) {",
      "  if (err && err.code === 'NoSuchEntity') {",
      "    console.log('User ' + process.argv[2] + ' does not exist');",
      "  } else {",
      "    iam.deleteUser(params, function(err, data) {",
      "      if (err) {",
      "        console.log('Error', err);",
      "      } else {",
      "        console.log('Success', data);",
      "      }",
      "    });",
      "  }",
      "});"
    ],
    "description": "iam delete User"
  },
  "aws.iam.detachRolePolicy": {
    "prefix": "aws.iam.detachRolePolicy",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var iam = new AWS.IAM({apiVersion: '2010-05-08'});",
      "var paramsRoleList = {",
      "  RoleName: process.argv[2]",
      "};",
      "iam.listAttachedRolePolicies(paramsRoleList, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } else {",
      "    var myRolePolicies = data.AttachedPolicies;",
      "    myRolePolicies.forEach(function (val, index, array) {",
      "      if (myRolePolicies[index].PolicyName === 'AmazonDynamoDBFullAccess') {",
      "        var params = {",
      "          PolicyArn: 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess',",
      "          RoleName: process.argv[2]",
      "        };",
      "        iam.detachRolePolicy(params, function(err, data) {",
      "          if (err) {",
      "            console.log('Unable to detach policy from role', err);",
      "          } else {",
      "            console.log('Policy detached from role successfully');",
      "            process.exit();",
      "          }",
      "        });",
      "      }",
      "    });",
      "  }",
      "});"
    ],
    "description": "iam detach Role Policy"
  },
  "aws.iam.getPolicy": {
    "prefix": "aws.iam.getPolicy",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var iam = new AWS.IAM({apiVersion: '2010-05-08'});",
      "var params = {",
      "  PolicyArn: 'arn:aws:iam::aws:policy/AWSLambdaExecute'",
      "};",
      "iam.getPolicy(params, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } else {",
      "    console.log('Success', data.Policy.Description);",
      "  }",
      "});"
    ],
    "description": "iam get Policy"
  },
  "aws.iam.getServerCertificate": {
    "prefix": "aws.iam.getServerCertificate",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var iam = new AWS.IAM({apiVersion: '2010-05-08'});",
      "iam.getServerCertificate({ServerCertificateName: 'CERTIFICATE_NAME'}, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } else {",
      "    console.log('Success', data);",
      "  }",
      "});"
    ],
    "description": "iam get Server Certificate"
  },
  "aws.iam.listAccessKeys": {
    "prefix": "aws.iam.listAccessKeys",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var iam = new AWS.IAM({apiVersion: '2010-05-08'});",
      "var params = {",
      "  MaxItems: 5,",
      "  UserName: 'IAM_USER_NAME'",
      "};",
      "iam.listAccessKeys(params, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } else {",
      "    console.log('Success', data);",
      "  }",
      "});"
    ],
    "description": "iam list Access Keys"
  },
  "aws.iam.listAccountAliases": {
    "prefix": "aws.iam.listAccountAliases",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var iam = new AWS.IAM({apiVersion: '2010-05-08'});",
      "iam.listAccountAliases({MaxItems: 10}, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } else {",
      "    console.log('Success', data);",
      "  }",
      "});"
    ],
    "description": "iam list Account Aliases"
  },
  "aws.iam.listServerCertificates": {
    "prefix": "aws.iam.listServerCertificates",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var iam = new AWS.IAM({apiVersion: '2010-05-08'});",
      "iam.listServerCertificates({}, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } else {",
      "    console.log('Success', data);",
      "  }",
      "});"
    ],
    "description": "iam list Server Certificates"
  },
  "aws.iam.listUsers": {
    "prefix": "aws.iam.listUsers",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var iam = new AWS.IAM({apiVersion: '2010-05-08'});",
      "var params = {",
      "  MaxItems: 10",
      "};",
      "iam.listUsers(params, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } else {",
      "    console.log('User ' + data.Users[0].UserName + ' created', data.Users[0].CreateDate);",
      "  }",
      "});"
    ],
    "description": "iam list Users"
  },
  "aws.iam.updateAccessKey": {
    "prefix": "aws.iam.updateAccessKey",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var iam = new AWS.IAM({apiVersion: '2010-05-08'});",
      "var params = {",
      "  AccessKeyId: 'ACCESS_KEY_ID',",
      "  Status: 'Active',",
      "  UserName: 'USER_NAME'",
      "};",
      "iam.updateAccessKey(params, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } else {",
      "    console.log('Success', data);",
      "  }",
      "});"
    ],
    "description": "iam update Access Key"
  },
  "aws.iam.updateServerCertificate": {
    "prefix": "aws.iam.updateServerCertificate",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var iam = new AWS.IAM({apiVersion: '2010-05-08'});",
      "var params = {",
      "  ServerCertificateName: 'CERTIFICATE_NAME',",
      "  NewServerCertificateName: 'NEW_CERTIFICATE_NAME'",
      "};",
      "iam.updateServerCertificate(params, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } else {",
      "    console.log('Success', data);",
      "  }",
      "});"
    ],
    "description": "iam update Server Certificate"
  },
  "aws.iam.updateUser": {
    "prefix": "aws.iam.updateUser",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var iam = new AWS.IAM({apiVersion: '2010-05-08'});",
      "var params = {",
      "  UserName: process.argv[2],",
      "  NewUserName: process.argv[3]",
      "};",
      "iam.updateUser(params, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } else {",
      "    console.log('Success', data);",
      "  }",
      "});"
    ],
    "description": "iam update User"
  },
  "aws.emc.cancelJob": {
    "prefix": "aws.emc.cancelJob",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'us-west-2'});",
      "AWS.config.mediaconvert = {endpoint : 'ACCOUNT_ENDPOINT'};",
      "var params = {",
      "  Id: 'JOB_ID' /* required */",
      "};",
      "var endpointPromise = new AWS.MediaConvert({apiVersion: '2017-08-29'}).cancelJob(params).promise();",
      "endpointPromise.then(",
      "  function(data) {",
      "    console.log('Job  ' + params.Id + ' is canceled');",
      "  },",
      "  function(err) {",
      "    console.log('Error', err);",
      "  }",
      ");"
    ],
    "description": "media convert cancel Job"
  },
  "aws.emc.createJobTemplate": {
    "prefix": "aws.emc.createJobTemplate",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'us-west-2'});",
      "AWS.config.mediaconvert({endpoint: 'ACCOUNT_ENDPOINT'});",
      "var params = {",
      "  Category: 'YouTube Jobs',",
      "  Description: 'Final production transcode',",
      "  Name: 'DemoTemplate',",
      "  Queue: 'JOB_QUEUE_ARN',",
      "  'Settings': {",
      "    'OutputGroups': [",
      "      {",
      "        'Name': 'File Group',",
      "        'OutputGroupSettings': {",
      "          'Type': 'FILE_GROUP_SETTINGS',",
      "          'FileGroupSettings': {",
      "            'Destination': 's3://BUCKET_NAME/'",
      "          }",
      "        },",
      "        'Outputs': [",
      "          {",
      "            'VideoDescription': {",
      "              'ScalingBehavior': 'DEFAULT',",
      "              'TimecodeInsertion': 'DISABLED',",
      "              'AntiAlias': 'ENABLED',",
      "              'Sharpness': 50,",
      "              'CodecSettings': {",
      "                'Codec': 'H_264',",
      "                'H264Settings': {",
      "                  'InterlaceMode': 'PROGRESSIVE',",
      "                  'NumberReferenceFrames': 3,",
      "                  'Syntax': 'DEFAULT',",
      "                  'Softness': 0,",
      "                  'GopClosedCadence': 1,",
      "                  'GopSize': 90,",
      "                  'Slices': 1,",
      "                  'GopBReference': 'DISABLED',",
      "                  'SlowPal': 'DISABLED',",
      "                  'SpatialAdaptiveQuantization': 'ENABLED',",
      "                  'TemporalAdaptiveQuantization': 'ENABLED',",
      "                  'FlickerAdaptiveQuantization': 'DISABLED',",
      "                  'EntropyEncoding': 'CABAC',",
      "                  'Bitrate': 5000000,",
      "                  'FramerateControl': 'SPECIFIED',",
      "                  'RateControlMode': 'CBR',",
      "                  'CodecProfile': 'MAIN',",
      "                  'Telecine': 'NONE',",
      "                  'MinIInterval': 0,",
      "                  'AdaptiveQuantization': 'HIGH',",
      "                  'CodecLevel': 'AUTO',",
      "                  'FieldEncoding': 'PAFF',",
      "                  'SceneChangeDetect': 'ENABLED',",
      "                  'QualityTuningLevel': 'SINGLE_PASS',",
      "                  'FramerateConversionAlgorithm': 'DUPLICATE_DROP',",
      "                  'UnregisteredSeiTimecode': 'DISABLED',",
      "                  'GopSizeUnits': 'FRAMES',",
      "                  'ParControl': 'SPECIFIED',",
      "                  'NumberBFramesBetweenReferenceFrames': 2,",
      "                  'RepeatPps': 'DISABLED',",
      "                  'FramerateNumerator': 30,",
      "                  'FramerateDenominator': 1,",
      "                  'ParNumerator': 1,",
      "                  'ParDenominator': 1",
      "                }",
      "              },",
      "              'AfdSignaling': 'NONE',",
      "              'DropFrameTimecode': 'ENABLED',",
      "              'RespondToAfd': 'NONE',",
      "              'ColorMetadata': 'INSERT'",
      "            },",
      "            'AudioDescriptions': [",
      "              {",
      "                'AudioTypeControl': 'FOLLOW_INPUT',",
      "                'CodecSettings': {",
      "                  'Codec': 'AAC',",
      "                  'AacSettings': {",
      "                    'AudioDescriptionBroadcasterMix': 'NORMAL',",
      "                    'RateControlMode': 'CBR',",
      "                    'CodecProfile': 'LC',",
      "                    'CodingMode': 'CODING_MODE_2_0',",
      "                    'RawFormat': 'NONE',",
      "                    'SampleRate': 48000,",
      "                    'Specification': 'MPEG4',",
      "                    'Bitrate': 64000",
      "                  }",
      "                },",
      "                'LanguageCodeControl': 'FOLLOW_INPUT',",
      "                'AudioSourceName': 'Audio Selector 1'",
      "              }",
      "            ],",
      "            'ContainerSettings': {",
      "              'Container': 'MP4',",
      "              'Mp4Settings': {",
      "                'CslgAtom': 'INCLUDE',",
      "                'FreeSpaceBox': 'EXCLUDE',",
      "                'MoovPlacement': 'PROGRESSIVE_DOWNLOAD'",
      "              }",
      "            },",
      "            'NameModifier': '_1'",
      "          }",
      "        ]",
      "      }",
      "    ],",
      "    'AdAvailOffset': 0,",
      "    'Inputs': [",
      "      {",
      "        'AudioSelectors': {",
      "          'Audio Selector 1': {",
      "            'Offset': 0,",
      "            'DefaultSelection': 'NOT_DEFAULT',",
      "            'ProgramSelection': 1,",
      "            'SelectorType': 'TRACK',",
      "            'Tracks': [",
      "              1",
      "            ]",
      "          }",
      "        },",
      "        'VideoSelector': {",
      "          'ColorSpace': 'FOLLOW'",
      "        },",
      "        'FilterEnable': 'AUTO',",
      "        'PsiControl': 'USE_PSI',",
      "        'FilterStrength': 0,",
      "        'DeblockFilter': 'DISABLED',",
      "        'DenoiseFilter': 'DISABLED',",
      "        'TimecodeSource': 'EMBEDDED',",
      "      }",
      "    ],",
      "    'TimecodeConfig': {",
      "      'Source': 'EMBEDDED'",
      "    }",
      "  }",
      "};",
      "var templatePromise = new AWS.MediaConvert({apiVersion: '2017-08-29'}).createJobTemplate(params).promise();",
      "templatePromise.then(",
      "  function(data) {",
      "    console.log('Success!', data);",
      "  },",
      "  function(err) {",
      "    console.log('Error', err);",
      "  }",
      ");"
    ],
    "description": "media convert create Job Template"
  },
  "aws.emc.createJob": {
    "prefix": "aws.emc.createJob",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'us-west-2'});",
      "AWS.config.mediaconvert({endpoint: 'ACCOUNT_ENDPOINT'});",
      "var params = {",
      "  'Queue': 'JOB_QUEUE_ARN',",
      "  'UserMetadata': {",
      "    'Customer': 'Amazon'",
      "  },",
      "  'Role': 'IAM_ROLE_ARN',",
      "  'Settings': {",
      "    'OutputGroups': [",
      "      {",
      "        'Name': 'File Group',",
      "        'OutputGroupSettings': {",
      "          'Type': 'FILE_GROUP_SETTINGS',",
      "          'FileGroupSettings': {",
      "            'Destination': 's3://OUTPUT_BUCKET_NAME/'",
      "          }",
      "        },",
      "        'Outputs': [",
      "          {",
      "            'VideoDescription': {",
      "              'ScalingBehavior': 'DEFAULT',",
      "              'TimecodeInsertion': 'DISABLED',",
      "              'AntiAlias': 'ENABLED',",
      "              'Sharpness': 50,",
      "              'CodecSettings': {",
      "                'Codec': 'H_264',",
      "                'H264Settings': {",
      "                  'InterlaceMode': 'PROGRESSIVE',",
      "                  'NumberReferenceFrames': 3,",
      "                  'Syntax': 'DEFAULT',",
      "                  'Softness': 0,",
      "                  'GopClosedCadence': 1,",
      "                  'GopSize': 90,",
      "                  'Slices': 1,",
      "                  'GopBReference': 'DISABLED',",
      "                  'SlowPal': 'DISABLED',",
      "                  'SpatialAdaptiveQuantization': 'ENABLED',",
      "                  'TemporalAdaptiveQuantization': 'ENABLED',",
      "                  'FlickerAdaptiveQuantization': 'DISABLED',",
      "                  'EntropyEncoding': 'CABAC',",
      "                  'Bitrate': 5000000,",
      "                  'FramerateControl': 'SPECIFIED',",
      "                  'RateControlMode': 'CBR',",
      "                  'CodecProfile': 'MAIN',",
      "                  'Telecine': 'NONE',",
      "                  'MinIInterval': 0,",
      "                  'AdaptiveQuantization': 'HIGH',",
      "                  'CodecLevel': 'AUTO',",
      "                  'FieldEncoding': 'PAFF',",
      "                  'SceneChangeDetect': 'ENABLED',",
      "                  'QualityTuningLevel': 'SINGLE_PASS',",
      "                  'FramerateConversionAlgorithm': 'DUPLICATE_DROP',",
      "                  'UnregisteredSeiTimecode': 'DISABLED',",
      "                  'GopSizeUnits': 'FRAMES',",
      "                  'ParControl': 'SPECIFIED',",
      "                  'NumberBFramesBetweenReferenceFrames': 2,",
      "                  'RepeatPps': 'DISABLED',",
      "                  'FramerateNumerator': 30,",
      "                  'FramerateDenominator': 1,",
      "                  'ParNumerator': 1,",
      "                  'ParDenominator': 1",
      "                }",
      "              },",
      "              'AfdSignaling': 'NONE',",
      "              'DropFrameTimecode': 'ENABLED',",
      "              'RespondToAfd': 'NONE',",
      "              'ColorMetadata': 'INSERT'",
      "            },",
      "            'AudioDescriptions': [",
      "              {",
      "                'AudioTypeControl': 'FOLLOW_INPUT',",
      "                'CodecSettings': {",
      "                  'Codec': 'AAC',",
      "                  'AacSettings': {",
      "                    'AudioDescriptionBroadcasterMix': 'NORMAL',",
      "                    'RateControlMode': 'CBR',",
      "                    'CodecProfile': 'LC',",
      "                    'CodingMode': 'CODING_MODE_2_0',",
      "                    'RawFormat': 'NONE',",
      "                    'SampleRate': 48000,",
      "                    'Specification': 'MPEG4',",
      "                    'Bitrate': 64000",
      "                  }",
      "                },",
      "                'LanguageCodeControl': 'FOLLOW_INPUT',",
      "                'AudioSourceName': 'Audio Selector 1'",
      "              }",
      "            ],",
      "            'ContainerSettings': {",
      "              'Container': 'MP4',",
      "              'Mp4Settings': {",
      "                'CslgAtom': 'INCLUDE',",
      "                'FreeSpaceBox': 'EXCLUDE',",
      "                'MoovPlacement': 'PROGRESSIVE_DOWNLOAD'",
      "              }",
      "            },",
      "            'NameModifier': '_1'",
      "          }",
      "        ]",
      "      }",
      "    ],",
      "    'AdAvailOffset': 0,",
      "    'Inputs': [",
      "      {",
      "        'AudioSelectors': {",
      "          'Audio Selector 1': {",
      "            'Offset': 0,",
      "            'DefaultSelection': 'NOT_DEFAULT',",
      "            'ProgramSelection': 1,",
      "            'SelectorType': 'TRACK',",
      "            'Tracks': [",
      "              1",
      "            ]",
      "          }",
      "        },",
      "        'VideoSelector': {",
      "          'ColorSpace': 'FOLLOW'",
      "        },",
      "        'FilterEnable': 'AUTO',",
      "        'PsiControl': 'USE_PSI',",
      "        'FilterStrength': 0,",
      "        'DeblockFilter': 'DISABLED',",
      "        'DenoiseFilter': 'DISABLED',",
      "        'TimecodeSource': 'EMBEDDED',",
      "        'FileInput': 's3://INPUT_BUCKET_AND_FILE_NAME'",
      "      }",
      "    ],",
      "    'TimecodeConfig': {",
      "      'Source': 'EMBEDDED'",
      "    }",
      "  }",
      "};",
      "var endpointPromise = new AWS.MediaConvert({apiVersion: '2017-08-29'}).createJob(params).promise();",
      "endpointPromise.then(",
      "  function(data) {",
      "    console.log('Job created! ', data);",
      "  },",
      "  function(err) {",
      "    console.log('Error', err);",
      "  }",
      ");"
    ],
    "description": "media convert create Job"
  },
  "aws.emc.deleteJobTemplate": {
    "prefix": "aws.emc.deleteJobTemplate",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'us-west-2'});",
      "AWS.config.mediaconvert = {endpoint : 'ACCOUNT_ENDPOINT'};",
      "var params = {",
      "  Name: 'TEMPLATE_NAME'",
      "};",
      "var deleteTemplatePromise = new AWS.MediaConvert({apiVersion: '2017-08-29'}).deleteJobTemplate(params).promise();",
      "deleteTemplatePromise.then(",
      "  function(data) {",
      "    console.log('Success ', data);",
      "  },",
      "  function(err) {",
      "    console.log('Error', err);",
      "  }",
      ");"
    ],
    "description": "media convert delete Job Template"
  },
  "aws.emc.getendpoint": {
    "prefix": "aws.emc.getendpoint",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'us-west-2'});",
      "var params = {",
      "  MaxResults: 0,",
      "};",
      "var endpointPromise = new AWS.MediaConvert({apiVersion: '2017-08-29'}).describeEndpoints(params).promise();",
      "endpointPromise.then(",
      "  function(data) {",
      "    console.log('Your MediaConvert endpoint is ', data.Endpoints);",
      "  },",
      "  function(err) {",
      "    console.log('Error', err);",
      "  }",
      ");"
    ],
    "description": "media convert get Endpoint"
  },
  "aws.emc.listJobs": {
    "prefix": "aws.emc.listJobs",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'us-west-2'});",
      "AWS.config.mediaconvert = {endpoint : 'ACCOUNT_ENDPOINT'};",
      "var params = {",
      "  MaxResults: 10,",
      "  Order: 'ASCENDING',",
      "  Queue: 'QUEUE_ARN',",
      "  Status: 'SUBMITTED'",
      "};",
      "var endpointPromise = new AWS.MediaConvert({apiVersion: '2017-08-29'}).listJobs(params).promise();",
      "endpointPromise.then(",
      "  function(data) {",
      "    console.log('Jobs: ', data);",
      "  },",
      "  function(err) {",
      "    console.log('Error', err);",
      "  }",
      ");"
    ],
    "description": "media convert list Jobs"
  },
  "aws.emc.listJobTemplates": {
    "prefix": "aws.emc.listJobTemplates",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'us-west-2'});",
      "AWS.config.mediaconvert = {endpoint : 'ACCOUNT_ENDPOINT'};",
      "var params = {",
      "  ListBy: 'NAME',",
      "  MaxResults: 10,",
      "  Order: 'ASCENDING',",
      "};",
      "var listTemplatesPromise = new AWS.MediaConvert({apiVersion: '2017-08-29'}).listJobTemplates(params).promise();",
      "listTemplatesPromise.then(",
      "  function(data) {",
      "    console.log('Success ', data);",
      "  },",
      "  function(err) {",
      "    console.log('Error', err);",
      "  }",
      ");"
    ],
    "description": "media convert list Job Templates"
  },
  "aws.emc.templatecreateJob": {
    "prefix": "aws.emc.templatecreateJob",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'us-west-2'});",
      "AWS.config.mediaconvert({endpoint: 'ACCOUNT_ENDPOINT'});",
      "var params = {",
      "  'Queue': 'QUEUE_ARN',",
      "  'JobTemplate': 'TEMPLATE_NAME',",
      "  'Role': 'ROLE_ARN',",
      "  'Settings': {",
      "    'Inputs': [",
      "      {",
      "        'AudioSelectors': {",
      "          'Audio Selector 1': {",
      "            'Offset': 0,",
      "            'DefaultSelection': 'NOT_DEFAULT',",
      "            'ProgramSelection': 1,",
      "            'SelectorType': 'TRACK',",
      "            'Tracks': [",
      "              1",
      "            ]",
      "          }",
      "        },",
      "        'VideoSelector': {",
      "          'ColorSpace': 'FOLLOW'",
      "        },",
      "        'FilterEnable': 'AUTO',",
      "        'PsiControl': 'USE_PSI',",
      "        'FilterStrength': 0,",
      "        'DeblockFilter': 'DISABLED',",
      "        'DenoiseFilter': 'DISABLED',",
      "        'TimecodeSource': 'EMBEDDED',",
      "        'FileInput': 's3://BUCKET_NAME/FILE_NAME'",
      "      }",
      "    ]",
      "  }",
      "};",
      "var templateJobPromise = new AWS.MediaConvert({apiVersion: '2017-08-29'}).createJob(params).promise();",
      "templateJobPromise.then(",
      "  function(data) {",
      "    console.log('Success! ', data);",
      "  },",
      "  function(err) {",
      "    console.log('Error', err);",
      "  }",
      ");"
    ],
    "description": "media convert template Create Job"
  },
  "aws.s3.createBucket": {
    "prefix": "aws.s3.createBucket",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "s3 = new AWS.S3({apiVersion: '2006-03-01'});",
      "var bucketParams = {",
      "  Bucket : process.argv[2],",
      "  ACL : 'public-read'",
      "};",
      "s3.createBucket(bucketParams, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } else {",
      "    console.log('Success', data.Location);",
      "  }",
      "});"
    ],
    "description": "s3 create Bucket"
  },
  "aws.s3.deleteBucket": {
    "prefix": "aws.s3.deleteBucket",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "s3 = new AWS.S3({apiVersion: '2006-03-01'});",
      "var bucketParams = {",
      "  Bucket : 'BUCKET_NAME',",
      "};",
      "s3.deleteBucket(bucketParams, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } else {",
      "    console.log('Success', data);",
      "  }",
      "});"
    ],
    "description": "s3 delete Bucket"
  },
  "aws.s3.deleteBucketPolicy": {
    "prefix": "aws.s3.deleteBucketPolicy",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "s3 = new AWS.S3({apiVersion: '2006-03-01'});",
      "var bucketParams = {Bucket: process.argv[2]};",
      "s3.deleteBucketPolicy(bucketParams, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } else if (data) {",
      "    console.log('Success', data);",
      "  }",
      "});"
    ],
    "description": "s3 delete Bucket Policy"
  },
  "aws.s3.deleteBucketWebsite": {
    "prefix": "aws.s3.deleteBucketWebsite",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "s3 = new AWS.S3({apiVersion: '2006-03-01'});",
      "var bucketParams = {Bucket: process.argv[2]};",
      "s3.deleteBucketWebsite(bucketParams, function(error, data) {",
      "  if (error) {",
      "    console.log('Error', err);",
      "  } else if (data) {",
      "    console.log('Success', data);",
      "  }",
      "});"
    ],
    "description": "s3 delete Bucket Web site"
  },
  "aws.s3.getBucketAcl": {
    "prefix": "aws.s3.getBucketAcl",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "s3 = new AWS.S3({apiVersion: '2006-03-01'});",
      "var bucketParams = {Bucket: process.argv[2]};",
      "s3.getBucketAcl(bucketParams, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } else if (data) {",
      "    console.log('Success', data.Grants);",
      "  }",
      "});"
    ],
    "description": "s3 get Bucket Acl"
  },
  "aws.s3.getBucketPolicy": {
    "prefix": "aws.s3.getBucketPolicy",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "s3 = new AWS.S3({apiVersion: '2006-03-01'});",
      "var bucketParams = {Bucket: process.argv[2]};",
      "s3.getBucketPolicy(bucketParams, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } else if (data) {",
      "    console.log('Success', data.Policy);",
      "  }",
      "});"
    ],
    "description": "s3 get Bucket Policy"
  },
  "aws.s3.getBucketWebsite": {
    "prefix": "aws.s3.getBucketWebsite",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "s3 = new AWS.S3({apiVersion: '2006-03-01'});",
      "var bucketParams = {Bucket: 'BUCKET_NAME'};",
      "s3.getBucketWebsite(bucketParams, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } else if (data) {",
      "    console.log('Success', data);",
      "  }",
      "});"
    ],
    "description": "s3 get Bucket Web site"
  },
  "aws.s3.getBucketCors": {
    "prefix": "aws.s3.getBucketCors",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "s3 = new AWS.S3({apiVersion: '2006-03-01'});",
      "var bucketParams = {Bucket: process.argv[2]};",
      "s3.getBucketCors(bucketParams, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } else if (data) {",
      "    console.log('Success', JSON.stringify(data.CORSRules));",
      "  }",
      "});"
    ],
    "description": "s3 get Bucket Cors"
  },
  "aws.s3.listBuckets": {
    "prefix": "aws.s3.listBuckets",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "s3_list = new AWS.S3({apiVersion: '2006-03-01'});",
      "s3_list.listBuckets(function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } else {",
      "    console.log('Success', data.Buckets);",
      "  }",
      "});"
    ],
    "description": "s3 list Buckets"
  },
  "aws.s3.listObjects": {
    "prefix": "aws.s3.listObjects",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "s3 = new AWS.S3({apiVersion: '2006-03-01'});",
      "var readParams = {",
      "  Bucket : 'BUCKET_NAME',",
      "};",
      "s3.listObjects(readParams, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } else {",
      "    console.log('Success', data);",
      "  }",
      "});"
    ],
    "description": "s3 list Objects"
  },
  "aws.s3.putBucketPolicy": {
    "prefix": "aws.s3.putBucketPolicy",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "s3 = new AWS.S3({apiVersion: '2006-03-01'});",
      "var readOnlyAnonUserPolicy = {",
      "  Version: '2012-10-17',",
      "  Statement: [",
      "    {",
      "      Sid: 'AddPerm',",
      "      Effect: 'Allow',",
      "      Principal: '*',",
      "      Action: [",
      "        's3:GetObject'",
      "      ],",
      "      Resource: [",
      "        ''",
      "      ]",
      "    }",
      "  ]",
      "};",
      "var bucketResource = 'arn:aws:s3:::' + process.argv[2] + '/*';",
      "readOnlyAnonUserPolicy.Statement[0].Resource[0] = bucketResource;",
      "var bucketPolicyParams = {Bucket: process.argv[2], Policy: JSON.stringify(readOnlyAnonUserPolicy)};",
      "  s3.putBucketPolicy(bucketPolicyParams, function(err, data) {",
      "    if (err) {",
      "      // display error message",
      "      console.log('Error', err);",
      "    } else {",
      "      console.log('Success', data);",
      "    }",
      "  });"
    ],
    "description": "s3 put Bucket Policy"
  },
  "aws.s3.putBucketWebsite": {
    "prefix": "aws.s3.putBucketWebsite",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "s3 = new AWS.S3({apiVersion: '2006-03-01'});",
      "var staticHostParams = {",
      "  Bucket: '',",
      "  WebsiteConfiguration: {",
      "  ErrorDocument: {",
      "    Key: ''",
      "  },",
      "  IndexDocument: {",
      "    Suffix: ''",
      "  },",
      "  }",
      "};",
      "staticHostParams.Bucket = process.argv[2];",
      "staticHostParams.WebsiteConfiguration.IndexDocument.Suffix = process.argv[3];",
      "staticHostParams.WebsiteConfiguration.ErrorDocument.Key = process.argv[4];",
      "s3.putBucketWebsite(staticHostParams, function(err, data) {",
      "  if (err) {",
      "    // display error message",
      "    console.log('Error', err);",
      "  } else {",
      "    // update the displayed policy for the selected bucket",
      "    console.log('Success', data);",
      "  }",
      "});"
    ],
    "description": "s3 put Bucket Web site"
  },
  "aws.s3.putBucketCors": {
    "prefix": "aws.s3.putBucketCors",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "s3 = new AWS.S3({apiVersion: '2006-03-01'});",
      "var thisConfig = {",
      "  AllowedHeaders:['Authorization'],",
      "  AllowedMethods:[],",
      "  AllowedOrigins:['*'],",
      "  ExposeHeaders:[],",
      "  MaxAgeSeconds:3000",
      "};",
      "var allowedMethods = [];",
      "process.argv.forEach(function (val, index, array) {",
      "  if (val.toUpperCase() === 'POST') {allowedMethods.push('POST')};",
      "  if (val.toUpperCase() === 'GET') {allowedMethods.push('GET')};",
      "  if (val.toUpperCase() === 'PUT') {allowedMethods.push('PUT')};",
      "  if (val.toUpperCase() === 'PATCH') {allowedMethods.push('PATCH')};",
      "  if (val.toUpperCase() === 'DELETE') {allowedMethods.push('DELETE')};",
      "  if (val.toUpperCase() === 'POST') {allowedMethods.push('POST')};",
      "});",
      "thisConfig.AllowedMethods = allowedMethods;",
      "var corsRules = new Array(thisConfig);",
      "var corsParams = {Bucket: process.argv[2], CORSConfiguration: {CORSRules: corsRules}};",
      "s3.putBucketCors(corsParams, function(err, data) {",
      "  if (err) {",
      "    // display error message",
      "    console.log('Error', err);",
      "  } else {",
      "    // update the displayed CORS config for the selected bucket",
      "    console.log('Success', data);",
      "  }",
      "});"
    ],
    "description": "s3 put Bucket Cors"
  },
  "aws.s3.upload": {
    "prefix": "aws.s3.upload",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "s3 = new AWS.S3({apiVersion: '2006-03-01'});",
      "var uploadParams = {Bucket: process.argv[2], Key: '', Body: ''};",
      "var file = process.argv[3];",
      "var fs = require('fs');",
      "var fileStream = fs.createReadStream(file);",
      "fileStream.on('error', function(err) {",
      "  console.log('File Error', err);",
      "});",
      "uploadParams.Body = fileStream;",
      "var path = require('path');",
      "uploadParams.Key = path.basename(file);",
      "s3.upload (uploadParams, function (err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } if (data) {",
      "    console.log('Upload Success', data.Location);",
      "  }",
      "});"
    ],
    "description": "s3 upload"
  },
  "aws.secret.getSecretValue": {
    "prefix": "aws.secret.getSecretValue",
    "body": [
      "var AWS = require('aws-sdk'),",
      "    region = '<<{{MyRegionName}}>>',",
      "    secretName = '<<{{MySecretName}}>>',",
      "    secret,",
      "    decodedBinarySecret;",
      "var client = new AWS.SecretsManager({",
      "    region: region",
      "});",
      "client.getSecretValue({SecretId: secretName}, function(err, data) {",
      "    if (err) {",
      "        if (err.code === 'DecryptionFailureException')",
      "            // Secrets Manager can't decrypt the protected secret text using the provided KMS key.",
      "            // Deal with the exception here, and/or rethrow at your discretion.",
      "            throw err;",
      "        else if (err.code === 'InternalServiceErrorException')",
      "            // An error occurred on the server side.",
      "            // Deal with the exception here, and/or rethrow at your discretion.",
      "            throw err;",
      "        else if (err.code === 'InvalidParameterException')",
      "            // You provided an invalid value for a parameter.",
      "            // Deal with the exception here, and/or rethrow at your discretion.",
      "            throw err;",
      "        else if (err.code === 'InvalidRequestException')",
      "            // You provided a parameter value that is not valid for the current state of the resource.",
      "            // Deal with the exception here, and/or rethrow at your discretion.",
      "            throw err;",
      "        else if (err.code === 'ResourceNotFoundException')",
      "            // We can't find the resource that you asked for.",
      "            // Deal with the exception here, and/or rethrow at your discretion.",
      "            throw err;",
      "    }",
      "    else {",
      "        // Decrypts secret using the associated KMS CMK.",
      "        // Depending on whether the secret is a string or binary, one of these fields will be populated.",
      "        if ('SecretString' in data) {",
      "            secret = data.SecretString;",
      "        } else {",
      "            let buff = new Buffer(data.SecretBinary, 'base64');",
      "            decodedBinarySecret = buff.toString('ascii');",
      "        }",
      "    }",
      "    ",
      "    // Your code goes here. ",
      "});"
    ],
    "description": "secret get Secret Value"
  },
  "aws.ses.createReceiptFilter": {
    "prefix": "aws.ses.createReceiptFilter",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var params = {",
      " Filter: {",
      "  IpFilter: {",
      "   Cidr: 'IP_ADDRESS_OR_RANGE', ",
      "   Policy: 'Allow' | 'Block'",
      "  },",
      "  Name: 'NAME'",
      " }",
      "};",
      "var sendPromise = new AWS.SES({apiVersion: '2010-12-01'}).createReceiptFilter(params).promise();",
      "sendPromise.then(",
      "  function(data) {",
      "    console.log(data);",
      "  }).catch(",
      "    function(err) {",
      "    console.error(err, err.stack);",
      "  });"
    ],
    "description": "ses create Receipt Filter"
  },
  "aws.ses.createReceiptRule": {
    "prefix": "aws.ses.createReceiptRule",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var params = {",
      " Rule: {",
      "  Actions: [",
      "     {",
      "    S3Action: {",
      "     BucketName: 'S3_BUCKET_NAME/*',",
      "     ObjectKeyPrefix: 'email'",
      "    }",
      "   }",
      "  ],",
      "    Recipients: [",
      "      'DOMAIN | EMAIL_ADDRESS',",
      "      /* more items */",
      "    ],",
      "  Enabled: true | false,",
      "  Name: 'RULE_NAME',",
      "  ScanEnabled: true | false,",
      "  TlsPolicy: 'Optional'",
      " },",
      " RuleSetName: 'RULE_SET_NAME'",
      "};",
      "var newRulePromise = new AWS.SES({apiVersion: '2010-12-01'}).createReceiptRule(params).promise();",
      "newRulePromise.then(",
      "  function(data) {",
      "    console.log('Rule created');",
      "  }).catch(",
      "    function(err) {",
      "    console.error(err, err.stack);",
      "  });"
    ],
    "description": "ses create Receipt Rule"
  },
  "aws.ses.createReceiptRuleSet": {
    "prefix": "aws.ses.createReceiptRuleSet",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var newRulePromise = new AWS.SES({apiVersion: '2010-12-01'}).createReceiptRuleSet({RuleSetName: 'NAME'}).promise();",
      "newRulePromise.then(",
      "  function(data) {",
      "    console.log(data);",
      "  }).catch",
      "    function(err) {",
      "    console.error(err, err.stack);",
      "  });"
    ],
    "description": "ses create Receipt Rule Set"
  },
  "aws.ses.createTemplate": {
    "prefix": "aws.ses.createTemplate",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var params = {",
      "  Template: { ",
      "    TemplateName: 'TEMPLATE_NAME', /* required */",
      "    HtmlPart: 'HTML_CONTENT',",
      "    SubjectPart: 'SUBJECT_LINE',",
      "    TextPart: 'TEXT_CONTENT'",
      "  }",
      "};",
      "var templatePromise = new AWS.SES({apiVersion: '2010-12-01'}).createTemplate(params).promise();",
      "templatePromise.then(",
      "  function(data) {",
      "    console.log(data);",
      "  }).catch(",
      "    function(err) {",
      "    console.error(err, err.stack);",
      "  });"
    ],
    "description": "ses create Template"
  },
  "aws.ses.deleteIdentity": {
    "prefix": "aws.ses.deleteIdentity",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var deletePromise = new AWS.SES({apiVersion: '2010-12-01'}).deleteIdentity({Identity: 'DOMAIN_NAME'}).promise();",
      "deletePromise.then(",
      "  function(data) {",
      "    console.log('Identity Deleted');",
      "  }).catch(",
      "    function(err) {",
      "    console.error(err, err.stack);",
      "  });"
    ],
    "description": "ses delete Identity"
  },
  "aws.ses.deleteReceiptFilter": {
    "prefix": "aws.ses.deleteReceiptFilter",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var sendPromise = new AWS.SES({apiVersion: '2010-12-01'}).deleteReceiptFilter({FilterName: 'NAME'}).promise();",
      "sendPromise.then(",
      "  function(data) {",
      "    console.log('IP Filter deleted');",
      "  }).catch(",
      "    function(err) {",
      "    console.error(err, err.stack);",
      "  });"
    ],
    "description": "ses delete Receipt Filter"
  },
  "aws.ses.deleteReceiptRule": {
    "prefix": "aws.ses.deleteReceiptRule",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var params = {",
      "  RuleName: 'RULE_NAME', /* required */",
      "  RuleSetName: 'RULE_SET_NAME' /* required */",
      "};",
      "var newRulePromise = new AWS.SES({apiVersion: '2010-12-01'}).deleteReceiptRule(params).promise();",
      "newRulePromise.then(",
      "  function(data) {",
      "    console.log('Receipt Rule Deleted');",
      "  }).catch(",
      "    function(err) {",
      "    console.error(err, err.stack);",
      "  });"
    ],
    "description": "ses delete Receipt Rule"
  },
  "aws.ses.deleteReceiptRuleSet": {
    "prefix": "aws.ses.deleteReceiptRuleSet",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var newRulePromise = new AWS.SES({apiVersion: '2010-12-01'}).deleteReceiptRuleSet({RuleSetName: 'NAME'}).promise();",
      "newRulePromise.then(",
      "  function(data) {",
      "    console.log(data);",
      "  },",
      "  function(err) {",
      "    console.log(err, err.stack);",
      "  }",
      ");"
    ],
    "description": "ses delete Receipt Rule Set"
  },
  "aws.ses.deleteTemplate": {
    "prefix": "aws.ses.deleteTemplate",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var templatePromise = new AWS.SES({apiVersion: '2010-12-01'}).deleteTemplate({TemplateName: 'TEMPLATE_NAME'}).promise();",
      "templatePromise.then(",
      "  function(data) {",
      "    console.log('Template Deleted');",
      "  }).catch(",
      "    function(err) {",
      "    console.error(err, err.stack);",
      "  });"
    ],
    "description": "ses delete Template"
  },
  "aws.ses.getTemplate": {
    "prefix": "aws.ses.getTemplate",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var templatePromise = new AWS.SES({apiVersion: '2010-12-01'}).getTemplate({TemplateName: 'TEMPLATE_NAME'}).promise();",
      "templatePromise.then(",
      "  function(data) {",
      "    console.log(data.SubjectPart);",
      "  }).catch(",
      "    function(err) {",
      "    console.error(err, err.stack);",
      "  });"
    ],
    "description": "ses get Template"
  },
  "aws.ses.listIdentities": {
    "prefix": "aws.ses.listIdentities",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var params = {",
      " IdentityType: 'Domain',",
      " MaxItems: 10",
      "};",
      "var listIDsPromise = new AWS.SES({apiVersion: '2010-12-01'}).listIdentities(params).promise();",
      "listIDsPromise.then(",
      "  function(data) {",
      "    console.log(data.Identities);",
      "  }).catch(",
      "  function(err) {",
      "    console.error(err, err.stack);",
      "  });"
    ],
    "description": "ses list Identities"
  },
  "aws.ses.listReceiptFilters": {
    "prefix": "aws.ses.listReceiptFilters",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var sendPromise = new AWS.SES({apiVersion: '2010-12-01'}).listReceiptFilters({}).promise();",
      "sendPromise.then(",
      "  function(data) {",
      "    console.log(data.Filters);",
      "  }).catch(",
      "    function(err) {",
      "    console.error(err, err.stack);",
      "  });"
    ],
    "description": "ses list Receipt Filters"
  },
  "aws.ses.listTemplates": {
    "prefix": "aws.ses.listTemplates",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var templatePromise = new AWS.SES({apiVersion: '2010-12-01'}).listTemplates({MaxItems: ITEMS_COUNT}).promise();",
      "templatePromise.then(",
      "  function(data) {",
      "    console.log(data);",
      "  }).catch(",
      "    function(err) {",
      "    console.error(err, err.stack);",
      "  });"
    ],
    "description": "ses list Templates"
  },
  "aws.ses.sendBulkTemplatedEmail": {
    "prefix": "aws.ses.sendBulkTemplatedEmail",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var params = {",
      "  Destinations: [ /* required */",
      "    {",
      "      Destination: { /* required */",
      "        CcAddresses: [",
      "          'EMAIL_ADDRESS',",
      "          /* more items */",
      "        ],",
      "        ToAddresses: [",
      "          'EMAIL_ADDRESS',",
      "          'EMAIL_ADDRESS'",
      "          /* more items */",
      "        ]",
      "      },",
      "      ReplacementTemplateData: { 'REPLACEMENT_TAG_NAME':'REPLACEMENT_VALUE' }",
      "  },",
      "  ],",
      "  Source: 'EMAIL_ADDRESS', /* required */",
      "  Template: 'TEMPLATE_NAME', /* required */",
      "  DefaultTemplateData: { 'REPLACEMENT_TAG_NAME':'REPLACEMENT_VALUE' },",
      "  ReplyToAddresses: [",
      "    'EMAIL_ADDRESS'",
      "  ]",
      "};",
      "var sendPromise = new AWS.SES({apiVersion: '2010-12-01'}).sendBulkTemplatedEmail(params).promise();",
      "sendPromise.then(",
      "  function(data) {",
      "    console.log(data);",
      "  }).catch(",
      "    function(err) {",
      "    console.log(err, err.stack);",
      "  });"
    ],
    "description": "ses send Bulk Templated Email"
  },
  "aws.ses.sendEmail": {
    "prefix": "aws.ses.sendEmail",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var params = {",
      "  Destination: { /* required */",
      "    CcAddresses: [",
      "      'EMAIL_ADDRESS',",
      "      /* more items */",
      "    ],",
      "    ToAddresses: [",
      "      'EMAIL_ADDRESS',",
      "      /* more items */",
      "    ]",
      "  },",
      "  Message: { /* required */",
      "    Body: { /* required */",
      "      Html: {",
      "       Charset: 'UTF-8',",
      "       Data: 'HTML_FORMAT_BODY'",
      "      },",
      "      Text: {",
      "       Charset: 'UTF-8',",
      "       Data: 'TEXT_FORMAT_BODY'",
      "      }",
      "     },",
      "     Subject: {",
      "      Charset: 'UTF-8',",
      "      Data: 'Test email'",
      "     }",
      "    },",
      "  Source: 'SENDER_EMAIL_ADDRESS', /* required */",
      "  ReplyToAddresses: [",
      "     'EMAIL_ADDRESS',",
      "    /* more items */",
      "  ],",
      "};",
      "           ",
      "var sendPromise = new AWS.SES({apiVersion: '2010-12-01'}).sendEmail(params).promise();",
      "sendPromise.then(",
      "  function(data) {",
      "    console.log(data.MessageId);",
      "  }).catch(",
      "    function(err) {",
      "    console.error(err, err.stack);",
      "  });"
    ],
    "description": "ses send Email"
  },
  "aws.ses.sendTemplatedEmail": {
    "prefix": "aws.ses.sendTemplatedEmail",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var params = {",
      "  Destination: { /* required */",
      "    CcAddresses: [",
      "      'EMAIL_ADDRESS',",
      "      /* more CC email addresses */",
      "    ],",
      "    ToAddresses: [",
      "      'EMAIL_ADDRESS',",
      "      /* more To email addresses */",
      "    ]",
      "  },",
      "  Source: 'EMAIL_ADDRESS', /* required */",
      "  Template: 'TEMPLATE_NAME', /* required */",
      "  TemplateData: { 'REPLACEMENT_TAG_NAME':'REPLACEMENT_VALUE' }, /* required */",
      "  ReplyToAddresses: [",
      "    'EMAIL_ADDRESS'",
      "  ],",
      "};",
      "var sendPromise = new AWS.SES({apiVersion: '2010-12-01'}).sendTemplatedEmail(params).promise();",
      "sendPromise.then(",
      "  function(data) {",
      "    console.log(data);",
      "  }).catch(",
      "    function(err) {",
      "    console.error(err, err.stack);",
      "  });"
    ],
    "description": "ses send Templated Email"
  },
  "aws.ses.updateTemplate": {
    "prefix": "aws.ses.updateTemplate",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var params = {",
      "  Template: { ",
      "    TemplateName: 'TEMPLATE_NAME', /* required */",
      "    HtmlPart: 'HTML_CONTENT',",
      "    SubjectPart: 'SUBJECT_LINE',",
      "    TextPart: 'TEXT_CONTENT'",
      "  }",
      "};",
      "var templatePromise = new AWS.SES({apiVersion: '2010-12-01'}).updateTemplate(params).promise();",
      "templatePromise.then(",
      "  function(data) {",
      "    console.log('Template Updated');",
      "  }).switch(",
      "    function(err) {",
      "    console.error(err, err.stack);",
      "  });"
    ],
    "description": "ses update Template"
  },
  "aws.ses.verifyDomainIdentity": {
    "prefix": "aws.ses.verifyDomainIdentity",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var verifyDomainPromise = new AWS.SES({apiVersion: '2010-12-01'}).verifyDomainIdentity({Domain: 'DOMAIN_NAME'}).promise();",
      "verifyDomainPromise.then(",
      "  function(data) {",
      "    console.log('Verification Token: ' + data.VerificationToken);",
      "  }).catch(",
      "    function(err) {",
      "    console.error(err, err.stack);",
      "  });"
    ],
    "description": "ses verify Domain Identity"
  },
  "aws.ses.verifyEmailIdentity": {
    "prefix": "aws.ses.verifyEmailIdentity",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var verifyEmailPromise = new AWS.SES({apiVersion: '2010-12-01'}).verifyEmailIdentity({EmailAddress: 'ADDRESS@DOMAIN.EXT'}).promise();",
      "verifyEmailPromise.then(",
      "  function(data) {",
      "    console.log('Email verification initiated');",
      "   }).catch(",
      "    function(err) {",
      "    console.error(err, err.stack);",
      "  });"
    ],
    "description": "ses verify Email Identity"
  },
  "aws.sns.checkIfPhoneNumberIsOptedOut": {
    "prefix": "aws.sns.checkIfPhoneNumberIsOptedOut",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var phonenumPromise = new AWS.SNS({apiVersion: '2010-03-31'}).checkIfPhoneNumberIsOptedOut({phoneNumber: 'PHONE_NUMBER'}).promise();",
      "phonenumPromise.then(",
      "  function(data) {",
      "    console.log('Phone Opt Out is ' + data.isOptedOut);",
      "  }).catch(",
      "    function(err) {",
      "    console.error(err, err.stack);",
      "  });"
    ],
    "description": "sns check If Phone Number Is Opted Out"
  },
  "aws.sns.createTopic": {
    "prefix": "aws.sns.createTopic",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'us-west-2'});",
      "var createTopicPromise = new AWS.SNS({apiVersion: '2010-03-31'}).createTopic({Name: 'FirstTopic'}).promise();",
      "createTopicPromise.then(",
      "  function(data) {",
      "    console.log('Topic ARN is ' + data.TopicArn);",
      "  }).catch(",
      "    function(err) {",
      "    console.error(err, err.stack);",
      "  });"
    ],
    "description": "sns create Topic"
  },
  "aws.sns.deleteTopic": {
    "prefix": "aws.sns.deleteTopic",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'us-west-2'});",
      "var deleteTopicPromise = new AWS.SNS({apiVersion: '2010-03-31'}).deleteTopic({TopicArn: 'TOPIC_ARN'}).promise();",
      "deleteTopicPromise.then(",
      "  function(data) {",
      "    console.log('Topic Deleted');",
      "  }).catch(",
      "    function(err) {",
      "    console.error(err, err.stack);",
      "  });"
    ],
    "description": "sns delete Topic"
  },
  "aws.sns.getSMSAttributes": {
    "prefix": "aws.sns.getSMSAttributes",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var params = {",
      "  attributes: [",
      "    'DefaultSMSType',",
      "    'ATTRIBUTE_NAME'",
      "    /* more items */",
      "  ]",
      "};",
      "var getSMSTypePromise = new AWS.SNS({apiVersion: '2010-03-31'}).getSMSAttributes(params).promise();",
      "getSMSTypePromise.then(",
      "  function(data) {",
      "    console.log(data);",
      "  }).catch(",
      "    function(err) {",
      "    console.error(err, err.stack);",
      "  });"
    ],
    "description": "sns get SMS Attributes"
  },
  "aws.sns.getTopicAttributes": {
    "prefix": "aws.sns.getTopicAttributes",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'us-west-2'});",
      "var getTopicAttribsPromise = new AWS.SNS({apiVersion: '2010-03-31'}).getTopicAttributes({TopicArn: 'TOPIC_ARN'}).promise();",
      "getTopicAttribsPromise.then(",
      "  function(data) {",
      "    console.log(data);",
      "  }).catch(",
      "    function(err) {",
      "    console.error(err, err.stack);",
      "  });"
    ],
    "description": "sns get Topic Attributes"
  },
  "aws.sns.listPhoneNumbersOptedOut": {
    "prefix": "aws.sns.listPhoneNumbersOptedOut",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var phonelistPromise = new AWS.SNS({apiVersion: '2010-03-31'}).listPhoneNumbersOptedOut({}).promise();",
      "  phonelistPromise.then(",
      "    function(data) {",
      "      console.log(data);",
      "    }).catch(",
      "    function(err) {",
      "      console.error(err, err.stack);",
      "    }",
      "  );"
    ],
    "description": "sns list Phone Numbers Opted Out"
  },
  "aws.sns.listSubscriptions": {
    "prefix": "aws.sns.listSubscriptions",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'us-west-2'});",
      "var subslistPromise = new AWS.SNS({apiVersion: '2010-03-31'}).listSubscriptions({}).promise();",
      "  subslistPromise.then(",
      "    function(data) {",
      "      console.log(data);",
      "    }).catch(",
      "    function(err) {",
      "      console.error(err, err.stack);",
      "    }",
      "  );"
    ],
    "description": "sns list Subscriptions"
  },
  "aws.sns.listTopics": {
    "prefix": "aws.sns.listTopics",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'us-west-2'});",
      "var listTopicsPromise = new AWS.SNS({apiVersion: '2010-03-31'}).listTopics({}).promise();",
      "listTopicsPromise.then(",
      "  function(data) {",
      "    console.log(data.Topics);",
      "  }).catch(",
      "    function(err) {",
      "    console.error(err, err.stack);",
      "  });"
    ],
    "description": "sns list Topics"
  },
  "aws.sns.publishSms": {
    "prefix": "aws.sns.publishSms",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var params = {",
      "  Message: 'TEXT_MESSAGE', /* required */",
      "  PhoneNumber: 'E.164_PHONE_NUMBER',",
      "};",
      "var publishTextPromise = new AWS.SNS({apiVersion: '2010-03-31'}).publish(params).promise();",
      "publishTextPromise.then(",
      "  function(data) {",
      "    console.log('MessageID is ' + data.MessageId);",
      "  }).catch(",
      "    function(err) {",
      "    console.error(err, err.stack);",
      "  });"
    ],
    "description": "sns publish Sms"
  },
  "aws.sns.publishTopic": {
    "prefix": "aws.sns.publishTopic",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'us-west-2'});",
      "var params = {",
      "  Message: 'This is David sending another text message from programming code.', /* required */",
      "  TopicArn: 'TOPIC_ARN',",
      "};",
      "var publishTextPromise = new AWS.SNS({apiVersion: '2010-03-31'}).publish(params).promise();",
      "publishTextPromise.then(",
      "  function(data) {",
      "    console.log('Message ${params.Message} send sent to the topic ${params.TopicArn}');",
      "    console.log('MessageID is ' + data.MessageId);",
      "  }).catch(",
      "    function(err) {",
      "    console.error(err, err.stack);",
      "  });"
    ],
    "description": "sns publish Topic"
  },
  "aws.sns.setSMSAttributes": {
    "prefix": "aws.sns.setSMSAttributes",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var params = {",
      "  attributes: { /* required */",
      "    'DefaultSMSType': 'Transactional', /* highest reliability",
      "    /* 'DefaultSMSType': 'Promotional' // lowest cost */",
      "  }",
      "};",
      "var setSMSTypePromise = new AWS.SNS({apiVersion: '2010-03-31'}).setSMSAttributes(params).promise();",
      "setSMSTypePromise.then(",
      "  function(data) {",
      "    console.log(data);",
      "  }).catch(",
      "    function(err) {",
      "    console.error(err, err.stack);",
      "  });"
    ],
    "description": "sns set SMS Attributes"
  },
  "aws.sns.setTopicAttributes": {
    "prefix": "aws.sns.setTopicAttributes",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'us-west-2'});",
      "var params = {",
      "  AttributeName: 'DisplayName', /* required */",
      "  TopicArn: 'TOPIC_ARN', /* required */",
      "  AttributeValue: 'First Topic'",
      "};",
      "var setTopicAttribsPromise = new AWS.SNS({apiVersion: '2010-03-31'}).setTopicAttributes(params).promise();",
      "setTopicAttribsPromise.then(",
      "  function(data) {",
      "    console.log(data);",
      "  }).catch(",
      "    function(err) {",
      "    console.error(err, err.stack);",
      "  });"
    ],
    "description": "sns set Topic Attributes"
  },
  "aws.sns.subscribeApp": {
    "prefix": "aws.sns.subscribeApp",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var params = {",
      "  Protocol: 'application', /* required */",
      "  TopicArn: 'TOPIC_ARN', /* required */",
      "  Endpoint: 'MOBILE_ENDPOINT_ARN'",
      "};",
      "var subscribePromise = new AWS.SNS({apiVersion: '2010-03-31'}).subscribe(params).promise();",
      "subscribePromise.then(",
      "  function(data) {",
      "    console.log('Subscription ARN is ' + data.SubscriptionArn);",
      "  }).catch(",
      "    function(err) {",
      "    console.error(err, err.stack);",
      "  });"
    ],
    "description": "sns subscribe App"
  },
  "aws.sns.subscribeEmail": {
    "prefix": "aws.sns.subscribeEmail",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var params = {",
      "  Protocol: 'email', /* required */",
      "  TopicArn: 'TOPIC_ARN', /* required */",
      "  Endpoint: 'EMAIL_ADDRESS'",
      "};",
      "var subscribePromise = new AWS.SNS({apiVersion: '2010-03-31'}).subscribe(params).promise();",
      "subscribePromise.then(",
      "  function(data) {",
      "    console.log('Subscription ARN is ' + data.SubscriptionArn);",
      "  }).catch(",
      "    function(err) {",
      "    console.error(err, err.stack);",
      "  });"
    ],
    "description": "sns subscribe Email"
  },
  "aws.sns.subscribeLambda": {
    "prefix": "aws.sns.subscribeLambda",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var params = {",
      "  Protocol: 'lambda', /* required */",
      "  TopicArn: 'TOPIC_ARN', /* required */",
      "  Endpoint: 'LAMBDA_FUNCTION_ARN'",
      "};",
      "var subscribePromise = new AWS.SNS({apiVersion: '2010-03-31'}).subscribe(params).promise();",
      "subscribePromise.then(",
      "  function(data) {",
      "    console.log('Subscription ARN is ' + data.SubscriptionArn);",
      "  }).catch(",
      "    function(err) {",
      "    console.error(err, err.stack);",
      "  });"
    ],
    "description": "sns subscribe Lambda"
  },
  "aws.sns.unSubscribe": {
    "prefix": "aws.sns.unSubscribe",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});                ",
      "var subscribePromise = new AWS.SNS({apiVersion: '2010-03-31'}).subscribe({SubscriptionArn : TOPIC_SUBSCRIPTION_ARN}).promise();",
      "subscribePromise.then(",
      "  function(data) {",
      "    console.log(data);",
      "  }).catch(",
      "    function(err) {",
      "    console.error(err, err.stack);",
      "  });"
    ],
    "description": "sns unSubscribe"
  },
  "aws.sqs.changeMessageVisibility": {
    "prefix": "aws.sqs.changeMessageVisibility",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var sqs = new AWS.SQS({apiVersion: '2012-11-05'});",
      "var queueURL = 'QUEUE_URL';",
      "var params = {",
      "  AttributeNames: [",
      "    'SentTimestamp'",
      "  ],",
      "  MaxNumberOfMessages: 1,",
      "  MessageAttributeNames: [",
      "    'All'",
      "  ],",
      "  QueueUrl: queueURL",
      "};",
      "sqs.receiveMessage(params, function(err, data) {",
      "  if (err) {",
      "    console.log('Receive Error', err);",
      "  } else {",
      "    var visibilityParams = {",
      "      QueueUrl: queueURL,",
      "      ReceiptHandle: data.Messages[0].ReceiptHandle,",
      "      VisibilityTimeout: 20 // 20 second timeout",
      "    };",
      "    sqs.changeMessageVisibility(visibilityParams, function(err, data) {",
      "      if (err) {",
      "        console.log('Delete Error', err);",
      "      } else {",
      "        console.log('Timeout Changed', data);",
      "      }",
      "    });",
      "  }",
      "});"
    ],
    "description": "sqs change Message Visibility"
  },
  "aws.sqs.createQueue": {
    "prefix": "aws.sqs.createQueue",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var sqs = new AWS.SQS({apiVersion: '2012-11-05'});",
      "var params = {",
      "  QueueName: 'QUEUE_NAME',",
      "  Attributes: {",
      "    'DelaySeconds': '60',",
      "    'MessageRetentionPeriod': '86400'",
      "  }",
      "};",
      "sqs.createQueue(params, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } else {",
      "    console.log('Success', data.QueueUrl);",
      "  }",
      "});"
    ],
    "description": "sqs create Queue"
  },
  "aws.sqs.setQueueAttributes": {
    "prefix": "aws.sqs.setQueueAttributes",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var sqs = new AWS.SQS({apiVersion: '2012-11-05'});",
      "var params = {",
      " Attributes: {",
      "  'RedrivePolicy': {'deadLetterTargetArn':'DEAD_LETTER_QUEUE_ARN','maxReceiveCount':'10'},",
      " },",
      " QueueUrl: 'QUEUE_URL'",
      "};",
      "sqs.setQueueAttributes(params, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } else {",
      "    console.log('Success', data);",
      "  }",
      "});"
    ],
    "description": "sqs set Queue Attributes"
  },
  "aws.sqs.deleteQueue": {
    "prefix": "aws.sqs.deleteQueue",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var sqs = new AWS.SQS({apiVersion: '2012-11-05'});",
      "sqs.deleteQueue({QueueUrl: 'QUEUE_URL'}, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } else {",
      "    console.log('Success', data);",
      "  }",
      "});"
    ],
    "description": "sqs delete Queue"
  },
  "aws.sqs.getQueueUrl": {
    "prefix": "aws.sqs.getQueueUrl",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var sqs = new AWS.SQS({apiVersion: '2012-11-05'});",
      "var params = {",
      "  QueueName: 'QUEUE_NAME'",
      "};",
      "sqs.getQueueUrl(params, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } else {",
      "    console.log('Success', data.QueueUrl);",
      "  }",
      "});"
    ],
    "description": "sqs get Queue Url"
  },
  "aws.sqs.listQueues": {
    "prefix": "aws.sqs.listQueues",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var sqs = new AWS.SQS({apiVersion: '2012-11-05'});",
      "var params = {};",
      "sqs.listQueues(params, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } else {",
      "    console.log('Success', data.QueueUrls);",
      "  }",
      "});"
    ],
    "description": "sqs list Queues"
  },
  "aws.sqs.longpolling.createQueue": {
    "prefix": "aws.sqs.longpolling.createQueue",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var sqs = new AWS.SQS({apiVersion: '2012-11-05'});",
      "var params = {",
      "  QueueName: 'QUEUE_NAME',",
      "  Attributes: {",
      "    'ReceiveMessageWaitTimeSeconds': '20',",
      "  }",
      "};",
      "sqs.createQueue(params, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } else {",
      "    console.log('Success', data.QueueUrl);",
      "  }",
      "});"
    ],
    "description": "sqs long polling create Queue"
  },
  "aws.sqs.longpolling.setQueueAttributes": {
    "prefix": "aws.sqs.longpolling.setQueueAttributes",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var sqs = new AWS.SQS({apiVersion: '2012-11-05'});",
      "var params = {",
      " Attributes: {",
      "  'ReceiveMessageWaitTimeSeconds': '20',",
      " },",
      " QueueUrl: 'QUEUE_URL'",
      "};",
      "sqs.setQueueAttributes(params, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } else {",
      "    console.log('Success', data);",
      "  }",
      "});"
    ],
    "description": "sqs long polling set Queue Attributes"
  },
  "aws.sqs.longpolling.receiveMessage": {
    "prefix": "aws.sqs.longpolling.receiveMessage",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var sqs = new AWS.SQS({apiVersion: '2012-11-05'});",
      "var queueURL = 'QUEUE_URL';",
      "var params = {",
      " AttributeNames: [",
      "    'SentTimestamp'",
      " ],",
      " MaxNumberOfMessages: 1,",
      " MessageAttributeNames: [",
      "    'All'",
      " ],",
      " QueueUrl: queueURL,",
      " WaitTimeSeconds: 20",
      "};",
      "sqs.receiveMessage(params, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } else {",
      "    console.log('Success', data);",
      "  }",
      "});"
    ],
    "description": "sqs long polling receive Message"
  },
  "aws.sqs.receiveMessage": {
    "prefix": "aws.sqs.receiveMessage",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var sqs = new AWS.SQS({apiVersion: '2012-11-05'});",
      "var queueURL = 'QUEUE_URL';",
      "var params = {",
      " AttributeNames: [",
      "    'SentTimestamp'",
      " ],",
      " MaxNumberOfMessages: 1,",
      " MessageAttributeNames: [",
      "    'All'",
      " ],",
      " QueueUrl: queueURL,",
      " VisibilityTimeout: 20,",
      " WaitTimeSeconds: 0",
      "};",
      "sqs.receiveMessage(params, function(err, data) {",
      "  if (err) {",
      "    console.log('Receive Error', err);",
      "  } else if (data.Messages) {",
      "    var deleteParams = {",
      "      QueueUrl: queueURL,",
      "      ReceiptHandle: data.Messages[0].ReceiptHandle",
      "    };",
      "    sqs.deleteMessage(deleteParams, function(err, data) {",
      "      if (err) {",
      "        console.log('Delete Error', err);",
      "      } else {",
      "        console.log('Message Deleted', data);",
      "      }",
      "    });",
      "  }",
      "});"
    ],
    "description": "sqs receive Message"
  },
  "aws.sqs.sendMessage": {
    "prefix": "aws.sqs.sendMessage",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "var sqs = new AWS.SQS({apiVersion: '2012-11-05'});",
      "var params = {",
      "  DelaySeconds: 10,",
      "  MessageAttributes: {",
      "    'Title': {",
      "      DataType: 'String',",
      "      StringValue: 'The Whistler'",
      "    },",
      "    'Author': {",
      "    DataType: 'String',",
      "    StringValue: 'John Grisham'",
      "    },",
      "  'WeeksOn': {",
      "    DataType: 'Number',",
      "    StringValue: '6'",
      "   }",
      " },",
      " MessageBody: 'Information about current NY Times fiction bestseller for week of 12/11/2016.',",
      " QueueUrl: 'QUEUE_URL'",
      "};",
      "sqs.sendMessage(params, function(err, data) {",
      "  if (err) {",
      "    console.log('Error', err);",
      "  } else {",
      "    console.log('Success', data.MessageId);",
      "  }",
      "});"
    ],
    "description": "sqs send Message"
  },
  "aws.glacier.createVault": {
    "prefix": "aws.glacier.createVault",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'us-west-2'});",
      "var glacier = new AWS.Glacier({apiVersion: '2012-06-01'});",
      "glacier.createVault({vaultName: 'YOUR_VAULT_NAME'}, function(err) {",
      "if (!err) console.log('Created vault!')",
      "});"
    ],
    "description": "glacier create Vault"
  },
  "aws.glacier.uploadArchive": {
    "prefix": "aws.glacier.uploadArchive",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'us-west-2'});",
      "",
      "var glacier = new AWS.Glacier({apiVersion: '2012-06-01'}),",
      "buffer = new Buffer(2.5 * 1024 * 1024); // 2.5MB buffer",
      "var params = {vaultName: 'YOUR_VAULT_NAME', body: buffer};",
      "glacier.uploadArchive(params, function(err, data) {",
      "if (err) console.log('Error uploading archive!', err);",
      "else console.log('Archive ID', data.archiveId);",
      "});"
    ],
    "description": "glacier upload Archive"
  },
  "aws.glacier.uploadMultipartPart": {
    "prefix": "aws.glacier.uploadMultipartPart",
    "body": [
      "var glacier = new AWS.Glacier({apiVersion: '2012-06-01'}),",
      "    vaultName = 'YOUR_VAULT_NAME',",
      "    buffer = new Buffer(2.5 * 1024 * 1024), // 2.5MB buffer",
      "    partSize = 1024 * 1024, // 1MB chunks,",
      "    numPartsLeft = Math.ceil(buffer.length / partSize),",
      "    startTime = new Date(),",
      "    params = {vaultName: vaultName, partSize: partSize.toString()};",
      "var treeHash = glacier.computeChecksums(buffer).treeHash;",
      "console.log('Initiating upload to', vaultName);",
      "glacier.initiateMultipartUpload(params, function (mpErr, multipart) {",
      "    if (mpErr) { console.log('Error!', mpErr.stack); return; }",
      "    console.log('Got upload ID', multipart.uploadId);",
      "    // Grab each partSize chunk and upload it as a part",
      "    for (var i = 0; i < buffer.length; i += partSize) {",
      "        var end = Math.min(i + partSize, buffer.length),",
      "            partParams = {",
      "                vaultName: vaultName,",
      "                uploadId: multipart.uploadId,",
      "                range: 'bytes ' + i + '-' + (end-1) + '/*',",
      "                body: buffer.slice(i, end)",
      "            };",
      "    ",
      "        // Send a single part",
      "        console.log('Uploading part', i, '=', partParams.range);",
      "        glacier.uploadMultipartPart(partParams, function(multiErr, mData) {",
      "            if (multiErr) return;",
      "            console.log('Completed part', this.request.params.range);",
      "            if (--numPartsLeft > 0) return; // complete only when all parts uploaded",
      "        ",
      "            var doneParams = {",
      "                vaultName: vaultName,",
      "                uploadId: multipart.uploadId,",
      "                archiveSize: buffer.length.toString(),",
      "                checksum: treeHash // the computed tree hash",
      "            };",
      "        ",
      "            console.log('Completing upload...');",
      "            glacier.completeMultipartUpload(doneParams, function(err, data) {",
      "                if (err) {",
      "                    console.log('An error occurred while uploading the archive');",
      "                    console.log(err);",
      "                } else {",
      "                    var delta = (new Date() - startTime) / 1000;",
      "                    console.log('Completed upload in', delta, 'seconds');",
      "                    console.log('Archive ID:', data.archiveId);",
      "                    console.log('Checksum:  ', data.checksum);",
      "                }",
      "            });",
      "        });",
      "    }",
      "});"
    ],
    "description": "glacier Multipart"
  },
  "aws.lambda": {
    "prefix": "aws.lambda",
    "body": [
      "var AWS = require('aws-sdk');",
      "AWS.config.update({region: 'REGION'});",
      "exports.handler = (event, context, callback) => {",
      "const URL_BASE = 'S3_BUCKET_URL';",
      "var slotResults = {",
      "\t'isWinner' : false,",
      "\t'leftWheelImage' : {'file' : {S: ''}},",
      "\t'middleWheelImage' : {'file' : {S: ''}},",
      "\t'rightWheelImage' : {'file' : {S: ''}}",
      "};",
      "var thisPullParams = {",
      "    Key : {'slotPosition' : {N: ''}},",
      "    TableName: 'slotWheels',",
      "    ProjectionExpression: 'imageFile'",
      "};",
      "var request = new AWS.DynamoDB({region: 'REGION', apiVersion: '2012-08-10'});",
      "thisPullParams.Key.slotPosition.N = Math.floor(Math.random()*10).toString();",
      "var myLeftPromise = request.getItem(thisPullParams).promise().then(function(data) {return URL_BASE + data.Item.imageFile.S});",
      "thisPullParams.Key.slotPosition.N = Math.floor(Math.random()*10).toString();",
      "var myMiddlePromise = request.getItem(thisPullParams).promise().then(function(data) {return URL_BASE + data.Item.imageFile.S});",
      "thisPullParams.Key.slotPosition.N = Math.floor(Math.random()*10).toString();",
      "var myRightPromise = request.getItem(thisPullParams).promise().then(function(data) {return URL_BASE + data.Item.imageFile.S});",
      "Promise.all([myLeftPromise, myMiddlePromise, myRightPromise]).then(function(values) {",
      "    slotResults.leftWheelImage.file.S = values[0];",
      "    slotResults.middleWheelImage.file.S = values[1];",
      "    slotResults.rightWheelImage.file.S = values[2];",
      "    // if all three values are identical, the spin is a winner",
      "    if ((values[0] === values[1]) && (values[0] === values[2])) {",
      "        slotResults.isWinner = true;",
      "    }",
      "    // return the JSON result to the caller of the Lambda function",
      "    callback(null, slotResults);",
      "});",
      "};"
    ],
    "description": "lambda functions"
  }
}